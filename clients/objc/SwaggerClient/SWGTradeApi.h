#import <Foundation/Foundation.h>
#import "SWGError.h"
#import "SWGTrade.h"
#import "SWGTradeBin.h"
#import "SWGObject.h"
#import "SWGApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface SWGTradeApi: NSObject

@property(nonatomic, assign)SWGApiClient *apiClient;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(SWGTradeApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;
+(SWGTradeApi*) sharedAPI;
///
///
/// Get Trades.
/// 
///
/// @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
/// @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
/// @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
/// @param count Number of results to fetch.
/// @param start Starting point for results.
/// @param reverse If true, will sort results newest first.
/// @param startTime Starting date filter for results.
/// @param endTime Ending date filter for results.
/// 
///
/// @return NSArray<SWGTrade>*
-(NSNumber*) tradeGetWithCompletionBlock :(NSString*) symbol 
     filter:(NSString*) filter 
     columns:(NSString*) columns 
     count:(NSNumber*) count 
     start:(NSNumber*) start 
     reverse:(NSNumber*) reverse 
     startTime:(NSDate*) startTime 
     endTime:(NSDate*) endTime 
    
    completionHandler: (void (^)(NSArray<SWGTrade>* output, NSError* error))completionBlock;
    


///
///
/// Get previous trades in time buckets.
/// 
///
/// @param binSize Time interval to bucket by. Available options: [&#39;1m&#39;, &#39;5m&#39;, &#39;1h&#39;, &#39;1d&#39;].
/// @param symbol Instrument symbol. Send a bare series (e.g. XBU) to get data for the nearest expiring contract in that series.\n\nYou can also send a timeframe, e.g. &#39;XBU:monthly&#39;. Timeframes are &#39;daily&#39;, &#39;weekly&#39;, &#39;monthly&#39;, &#39;quarterly&#39;, and &#39;biquarterly&#39;.
/// @param filter Generic table filter. Send JSON key/value pairs, such as {\&quot;key\&quot;: \&quot;value\&quot;}. You can key on individual fields, and do more advanced querying on timestamps. See &lt;a href=\&quot;http://localhost:2001/app/restAPI#timestamp-filters\&quot;&gt;http://localhost:2001/app/restAPI#timestamp-filters&lt;/a&gt; for more details.
/// @param columns Array of column names to fetch. If omitted, will return all columns.\n\nNote that this method will always return item keys, even when not specified, so you may receive more columns that you expect.
/// @param count Number of results to fetch.
/// @param start Starting point for results.
/// @param reverse If true, will sort results newest first.
/// @param startTime Starting date filter for results.
/// @param endTime Ending date filter for results.
/// 
///
/// @return NSArray<SWGTradeBin>*
-(NSNumber*) tradeGetBucketedWithCompletionBlock :(NSString*) binSize 
     symbol:(NSString*) symbol 
     filter:(NSString*) filter 
     columns:(NSString*) columns 
     count:(NSNumber*) count 
     start:(NSNumber*) start 
     reverse:(NSNumber*) reverse 
     startTime:(NSDate*) startTime 
     endTime:(NSDate*) endTime 
    
    completionHandler: (void (^)(NSArray<SWGTradeBin>* output, NSError* error))completionBlock;
    


///
///
/// Get trades between two dates. [Deprecated, use GET /trades]
/// 
///
/// @param startTime Start date.
/// @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
/// @param endTime End Date.
/// 
///
/// @return NSArray<SWGTrade>*
-(NSNumber*) tradeGetByDateWithCompletionBlock :(NSDate*) startTime 
     symbol:(NSString*) symbol 
     endTime:(NSDate*) endTime 
    
    completionHandler: (void (^)(NSArray<SWGTrade>* output, NSError* error))completionBlock;
    


///
///
/// Get recent trades. [Deprecated, use GET /trades]
/// 
///
/// @param count Number of trades to fetch.
/// @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series.
/// 
///
/// @return NSArray<SWGTrade>*
-(NSNumber*) tradeGetRecentWithCompletionBlock :(NSNumber*) count 
     symbol:(NSString*) symbol 
    
    completionHandler: (void (^)(NSArray<SWGTrade>* output, NSError* error))completionBlock;
    



@end
