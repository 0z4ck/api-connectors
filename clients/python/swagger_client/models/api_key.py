# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ApiKey(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ApiKey - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'secret': 'str',
            'name': 'str',
            'nonce': 'float',
            'cidr': 'str',
            'permissions': 'list[str]',
            'enabled': 'bool',
            'user_id': 'float',
            'created': 'date'
        }

        self.attribute_map = {
            'id': 'id',
            'secret': 'secret',
            'name': 'name',
            'nonce': 'nonce',
            'cidr': 'cidr',
            'permissions': 'permissions',
            'enabled': 'enabled',
            'user_id': 'userId',
            'created': 'created'
        }

        self._id = None
        self._secret = None
        self._name = None
        self._nonce = None
        self._cidr = None
        self._permissions = None
        self._enabled = None
        self._user_id = None
        self._created = None

    @property
    def id(self):
        """
        Gets the id of this ApiKey.


        :return: The id of this ApiKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ApiKey.


        :param id: The id of this ApiKey.
        :type: str
        """
        self._id = id

    @property
    def secret(self):
        """
        Gets the secret of this ApiKey.


        :return: The secret of this ApiKey.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """
        Sets the secret of this ApiKey.


        :param secret: The secret of this ApiKey.
        :type: str
        """
        self._secret = secret

    @property
    def name(self):
        """
        Gets the name of this ApiKey.


        :return: The name of this ApiKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApiKey.


        :param name: The name of this ApiKey.
        :type: str
        """
        self._name = name

    @property
    def nonce(self):
        """
        Gets the nonce of this ApiKey.


        :return: The nonce of this ApiKey.
        :rtype: float
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """
        Sets the nonce of this ApiKey.


        :param nonce: The nonce of this ApiKey.
        :type: float
        """
        self._nonce = nonce

    @property
    def cidr(self):
        """
        Gets the cidr of this ApiKey.


        :return: The cidr of this ApiKey.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """
        Sets the cidr of this ApiKey.


        :param cidr: The cidr of this ApiKey.
        :type: str
        """
        self._cidr = cidr

    @property
    def permissions(self):
        """
        Gets the permissions of this ApiKey.


        :return: The permissions of this ApiKey.
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this ApiKey.


        :param permissions: The permissions of this ApiKey.
        :type: list[str]
        """
        self._permissions = permissions

    @property
    def enabled(self):
        """
        Gets the enabled of this ApiKey.


        :return: The enabled of this ApiKey.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ApiKey.


        :param enabled: The enabled of this ApiKey.
        :type: bool
        """
        self._enabled = enabled

    @property
    def user_id(self):
        """
        Gets the user_id of this ApiKey.


        :return: The user_id of this ApiKey.
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ApiKey.


        :param user_id: The user_id of this ApiKey.
        :type: float
        """
        self._user_id = user_id

    @property
    def created(self):
        """
        Gets the created of this ApiKey.


        :return: The created of this ApiKey.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this ApiKey.


        :param created: The created of this ApiKey.
        :type: date
        """
        self._created = created

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

