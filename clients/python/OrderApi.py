#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class OrderApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def newOrder(self, symbol, quantity, price, **kwargs):
        """Create a new order. [Deprecated]

        Args:
            symbol, str: Instrument name. (required)

            quantity, float: Quantity. Use positive numbers to buy, negative to sell. (required)

            price, float: Price to buy. (required)

            ioc, bool: Set to true to place an immediateOrCancel order. (optional)

            clOrdID, str: Optional Client Order ID to give this order. This ID will come back on any execution messages tied to this order. (optional)

            

        Returns: Order
        """

        allParams = ['symbol', 'quantity', 'price', 'ioc', 'clOrdID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method newOrder" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order/new'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Order')
        return responseObject
        

        

    def newOrder_OrderApi_0(self, symbol, quantity, price, **kwargs):
        """Create a new order.

        Args:
            symbol, str: Instrument name. (required)

            quantity, float: Quantity. Use positive numbers to buy, negative to sell. (required)

            price, float: Price to buy. (required)

            ioc, bool: Set to true to place an immediateOrCancel order. (optional)

            clOrdID, str: Optional Client Order ID to give this order. This ID will come back on any execution messages tied to this order. (optional)

            

        Returns: Order
        """

        allParams = ['symbol', 'quantity', 'price', 'ioc', 'clOrdID']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method newOrder_OrderApi_0" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Order')
        return responseObject
        

        

    def cancelOrder(self, **kwargs):
        """Cancel order(s). Send multiple order IDs to cancel in bulk.

        Args:
            orderID, str: Order ID(s). (optional)

            clOrdID, str: Client Order ID(s). See POST /order. (optional)

            text, str: Optional cancellation annotation. e.g. 'Spread Exceeded' (optional)

            

        Returns: Array[Order]
        """

        allParams = ['orderID', 'clOrdID', 'text']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cancelOrder" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Order]')
        return responseObject
        

        

    def getOrders(self, **kwargs):
        """Get your orders.

        Args:
            filter, object: Filter. For example, send {&quot;symbol&quot;: &quot;XBTF15&quot;, &quot;open&quot;: true}. (optional)

            columns, list[any]: Which columns to fetch. For example, send [&quot;columnName&quot;]. (optional)

            count, float: Number of rows to fetch. (optional)

            

        Returns: Array[Order]
        """

        allParams = ['filter', 'columns', 'count']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getOrders" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('filter' in params):
            queryParams['filter'] = self.apiClient.toPathValue(params['filter'])
        if ('columns' in params):
            queryParams['columns'] = self.apiClient.toPathValue(params['columns'])
        if ('count' in params):
            queryParams['count'] = self.apiClient.toPathValue(params['count'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Order]')
        return responseObject
        

        

    def cancelOrder_OrderApi_0(self, orderID, **kwargs):
        """Cancel order(s). Send multiple order IDs to cancel in bulk. [Deprecated]

        Args:
            orderID, str: Order ID(s). (required)

            clOrdID, str: Client Order ID(s). See POST /order. (optional)

            text, str: Optional cancellation annotation. e.g. 'Spread Exceeded' (optional)

            

        Returns: Array[Order]
        """

        allParams = ['orderID', 'clOrdID', 'text']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cancelOrder_OrderApi_0" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order/cancel'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Order]')
        return responseObject
        

        

    def getOrders_OrderApi_0(self, **kwargs):
        """Get your orders. [Deprecated, use GET /order]

        Args:
            filter, object: Filter. For example, send {&quot;symbol&quot;: &quot;XBTF15&quot;, &quot;open&quot;: true}. (optional)

            columns, list[any]: Which columns to fetch. For example, send [&quot;columnName&quot;]. (optional)

            count, float: Number of rows to fetch. (optional)

            

        Returns: Array[Order]
        """

        allParams = ['filter', 'columns', 'count']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getOrders_OrderApi_0" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order/myOrders'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('filter' in params):
            queryParams['filter'] = self.apiClient.toPathValue(params['filter'])
        if ('columns' in params):
            queryParams['columns'] = self.apiClient.toPathValue(params['columns'])
        if ('count' in params):
            queryParams['count'] = self.apiClient.toPathValue(params['count'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Order]')
        return responseObject
        

        

    def getOrders_OrderApi_1(self, **kwargs):
        """Get your open orders.

        Args:
            filter, object: Filter. For example, send {&quot;symbol&quot;: &quot;XBTF15&quot;, &quot;open&quot;: true}. (optional)

            columns, list[any]: Which columns to fetch. For example, send [&quot;columnName&quot;]. (optional)

            count, float: Number of rows to fetch. (optional)

            

        Returns: Array[Order]
        """

        allParams = ['filter', 'columns', 'count']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getOrders_OrderApi_1" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order/myOpenOrders'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('filter' in params):
            queryParams['filter'] = self.apiClient.toPathValue(params['filter'])
        if ('columns' in params):
            queryParams['columns'] = self.apiClient.toPathValue(params['columns'])
        if ('count' in params):
            queryParams['count'] = self.apiClient.toPathValue(params['count'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Order]')
        return responseObject
        

        

    def cancelAllAfter(self, timeout, **kwargs):
        """Automatically cancel all your orders after a specified timeout.

        Args:
            timeout, float: Timeout in ms. Set to 0 to cancel this timer.  (required)

            

        Returns: object
        """

        allParams = ['timeout']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cancelAllAfter" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order/cancelAllAfter'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'object')
        return responseObject
        

        

    




