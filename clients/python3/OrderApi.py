#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from .models import *


class OrderApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def order_newOrder(self, symbol, quantity, price, **kwargs):
        """Create a new order.

        Args:
            symbol, str: Instrument name. (required)

            quantity, float: Quantity. Use positive numbers to buy, negative to sell. (required)

            price, float: Price to buy. (required)

            ioc, bool: Set to true to place an immediateOrCancel order. (optional)

            

        Returns: order
        """

        allParams = ['symbol', 'quantity', 'price', 'ioc']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method order_newOrder" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order/new'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'order')
        return responseObject
        

        

    def order_cancelOrder(self, orderID, **kwargs):
        """Cancel an order.

        Args:
            orderID, str: Order ID. (required)

            

        Returns: order
        """

        allParams = ['orderID']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method order_cancelOrder" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order/cancel'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'order')
        return responseObject
        

        

    def order_myOrders(self, **kwargs):
        """Get your recent orders.

        Args:
            filter, object: Table filter. Filter e.g. by symbol. (optional)

            columns, array[str]: Which columns to fetch. (optional)

            count, float: Number of rows to fetch (optional)

            

        Returns: Array[order]
        """

        allParams = ['filter', 'columns', 'count']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method order_myOrders" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order/myOrders'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('filter' in params):
            queryParams['filter'] = self.apiClient.toPathValue(params['filter'])
        if ('columns' in params):
            queryParams['columns'] = self.apiClient.toPathValue(params['columns'])
        if ('count' in params):
            queryParams['count'] = self.apiClient.toPathValue(params['count'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[order]')
        return responseObject
        

        

    def order_myOpenOrders(self, **kwargs):
        """Get your open orders.

        Args:
            

        Returns: Array[order]
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method order_myOpenOrders" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/order/myOpenOrders'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[order]')
        return responseObject
        

        

    




