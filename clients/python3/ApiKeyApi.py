#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from .models import *


class ApiKeyApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def createKey(self, **kwargs):
        """Create a new API Key.

        Args:
            name, str: Key name. This name is for reference only. (optional)

            cidr, str: CIDR block to restrict this key to. To restrict to a single address, append &quot;/32&quot;, e.g. 207.39.29.22/32. Leave blank or set to 0.0.0.0/0 to allow all IPs. Only one block may be set. &lt;a href=&quot;http://software77.net/cidr-101.html&quot;&gt;More on CIDR blocks&lt;/a&gt; (optional)

            enabled, bool: Set to true to enable this key on creation. Otherwise, it must be explicitly enabled via /apiKey/enable. (optional)

            

        Returns: ApiKey
        """

        allParams = ['name', 'cidr', 'enabled']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method createKey" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apiKey'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ApiKey')
        return responseObject
        

        

    def getKeys(self, **kwargs):
        """Get your API Keys.

        Args:
            

        Returns: Array[ApiKey]
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getKeys" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apiKey'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[ApiKey]')
        return responseObject
        

        

    def remove(self, **kwargs):
        """Remove an API Key.

        Args:
            apiKeyID, str: API Key ID (public component). (optional)

            

        Returns: bool
        """

        allParams = ['apiKeyID']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method remove" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apiKey'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'DELETE'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'bool')
        return responseObject
        

        

    def disable(self, **kwargs):
        """Disable an API Key.

        Args:
            apiKeyID, str: API Key ID (public component). (optional)

            

        Returns: ApiKey
        """

        allParams = ['apiKeyID']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method disable" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apiKey/disable'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ApiKey')
        return responseObject
        

        

    def enable(self, **kwargs):
        """Enable an API Key.

        Args:
            apiKeyID, str: API Key ID (public component). (optional)

            

        Returns: ApiKey
        """

        allParams = ['apiKeyID']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method enable" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/apiKey/enable'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'ApiKey')
        return responseObject
        

        

    




