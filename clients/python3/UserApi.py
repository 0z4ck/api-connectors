#!/usr/bin/env python
"""
WordAPI.py
Copyright 2014 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from .models import *


class UserApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    

    def getDepositAddress(self, **kwargs):
        """Get a deposit address.

        Args:
            currency, str:  (optional)

            

        Returns: str
        """

        allParams = ['currency']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getDepositAddress" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/depositAddress'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('currency' in params):
            queryParams['currency'] = self.apiClient.toPathValue(params['currency'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'str')
        return responseObject
        

        

    def getWalletHistory(self, **kwargs):
        """Get a history of all of your wallet transactions (deposits and withdrawals).

        Args:
            

        Returns: Array[Transaction]
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getWalletHistory" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/walletHistory'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[Transaction]')
        return responseObject
        

        

    def requestWithdrawal(self, amount, address, **kwargs):
        """Request a withdrawal to an external wallet.

        Args:
            amount, float: Amount of withdrawal currency. Note that for Bitcoin withdrawals, a standard 0.0001 XBT fee is charged by the Bitcoin network. (required)

            address, str: Destination Address. (required)

            currency, str: Currency you're withdrawing. (optional)

            

        Returns: Transaction
        """

        allParams = ['amount', 'address', 'currency']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method requestWithdrawal" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/requestWithdrawal'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Transaction')
        return responseObject
        

        

    def cancelWithdrawal(self, token, **kwargs):
        """Cancel a withdrawal.

        Args:
            token, str:  (required)

            

        Returns: Transaction
        """

        allParams = ['token']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method cancelWithdrawal" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/cancelWithdrawal'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Transaction')
        return responseObject
        

        

    def confirmWithdrawal(self, token, **kwargs):
        """Confirm a withdrawal.

        Args:
            token, str:  (required)

            

        Returns: Transaction
        """

        allParams = ['token']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method confirmWithdrawal" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/confirmWithdrawal'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Transaction')
        return responseObject
        

        

    def requestEnableTFA(self, **kwargs):
        """Get Google Authenticator secret key for setting up two-factor auth. Fails if already enabled.

        Args:
            type, str: Two-factor auth type. Supported types: 'GA' (Google Authenticator) (optional)

            

        Returns: bool
        """

        allParams = ['type']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method requestEnableTFA" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/requestEnableTFA'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'bool')
        return responseObject
        

        

    def confirmEnableTFA(self, token, **kwargs):
        """Confirm two-factor auth for this account.

        Args:
            token, str: Token from your selected TFA type. (required)

            type, str: Two-factor auth type. Supported types: 'GA' (Google Authenticator) (optional)

            

        Returns: bool
        """

        allParams = ['token', 'type']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method confirmEnableTFA" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/confirmEnableTFA'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'bool')
        return responseObject
        

        

    def sendVerificationEmail(self, email, **kwargs):
        """Re-send verification email.

        Args:
            email, str:  (required)

            

        Returns: bool
        """

        allParams = ['email']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method sendVerificationEmail" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/resendVerificationEmail'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('email' in params):
            queryParams['email'] = self.apiClient.toPathValue(params['email'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'bool')
        return responseObject
        

        

    def confirmEmail(self, token, **kwargs):
        """Confirm your email address with a token.

        Args:
            token, str:  (required)

            

        Returns: bool
        """

        allParams = ['token']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method confirmEmail" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/confirmEmail'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'bool')
        return responseObject
        

        

    def requestPasswordReset(self, email, **kwargs):
        """Request a password reset.

        Args:
            email, str:  (required)

            

        Returns: bool
        """

        allParams = ['email']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method requestPasswordReset" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/requestPasswordReset'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'bool')
        return responseObject
        

        

    def confirmPasswordReset(self, email, token, newPassword, **kwargs):
        """Confirm a password reset.

        Args:
            email, str:  (required)

            token, str:  (required)

            newPassword, str:  (required)

            

        Returns: bool
        """

        allParams = ['email', 'token', 'newPassword']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method confirmPasswordReset" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/confirmPasswordReset'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'bool')
        return responseObject
        

        

    def newUser(self, email, password, username, **kwargs):
        """Register a new user.

        Args:
            email, str: Your email address. (required)

            password, str: Your password. (required)

            username, str: Desired username. (required)

            firstname, str: First name. (optional)

            lastname, str: Last name. (optional)

            acceptsTOS, str: Set to true to indicate acceptance of the Terms of Service (https://www.bitmex.com/app/terms). (optional)

            accountType, str: Account type. Options: ['Trader', 'Hedger']. See the &lt;a href=&quot;/app/fees&quot;&gt;fees page&lt;/a&gt; for more details. (optional)

            

        Returns: User
        """

        allParams = ['email', 'password', 'username', 'firstname', 'lastname', 'acceptsTOS', 'accountType']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method newUser" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'User')
        return responseObject
        

        

    def getMe(self, **kwargs):
        """Get your user model.

        Args:
            

        Returns: User
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getMe" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'User')
        return responseObject
        

        

    def updateMe(self, **kwargs):
        """Update your password, name, and other attributes.

        Args:
            firstname, str:  (optional)

            lastname, str:  (optional)

            oldPassword, str:  (optional)

            newPassword, str:  (optional)

            newPasswordConfirm, str:  (optional)

            accountType, str: Account fee schedule. Options: ['Trader', 'Hedger']. See the &lt;a href=&quot;/app/fees&quot;&gt;fees page&lt;/a&gt; for more details. (optional)

            

        Returns: User
        """

        allParams = ['firstname', 'lastname', 'oldPassword', 'newPassword', 'newPasswordConfirm', 'accountType']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method updateMe" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'PUT'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'User')
        return responseObject
        

        

    def login(self, email, password, **kwargs):
        """Log in to BitMEX.

        Args:
            email, str: Your email address. (required)

            password, str: Your password. (required)

            token, str: OTP Token (YubiKey, Google Authenticator) (optional)

            

        Returns: AccessToken
        """

        allParams = ['email', 'password', 'token']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method login" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/login'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'AccessToken')
        return responseObject
        

        

    def logout(self, **kwargs):
        """Log out of BitMEX.

        Args:
            

        Returns: 
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method logout" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/logout'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        

        

    def savePreferences(self, prefs, **kwargs):
        """Save application preferences.

        Args:
            prefs, object:  (required)

            

        Returns: User
        """

        allParams = ['prefs']

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method savePreferences" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/preferences'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'User')
        return responseObject
        

        

    def getCommission(self, **kwargs):
        """Get your account's commission status.

        Args:
            

        Returns: Array[any]
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].items():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method getCommission" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/user/commission'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Array[any]')
        return responseObject
        

        

    




