/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BitMexApi);
  }
}(this, function(expect, BitMexApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BitMexApi.Wallet();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Wallet', function() {
    it('should create an instance of Wallet', function() {
      // uncomment below and update the code to test Wallet
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be.a(BitMexApi.Wallet);
    });

    it('should have the property account (base name: "account")', function() {
      // uncomment below and update the code to test the property account
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property prevDeposited (base name: "prevDeposited")', function() {
      // uncomment below and update the code to test the property prevDeposited
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property prevWithdrawn (base name: "prevWithdrawn")', function() {
      // uncomment below and update the code to test the property prevWithdrawn
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property prevAmount (base name: "prevAmount")', function() {
      // uncomment below and update the code to test the property prevAmount
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property prevTimestamp (base name: "prevTimestamp")', function() {
      // uncomment below and update the code to test the property prevTimestamp
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property deltaDeposited (base name: "deltaDeposited")', function() {
      // uncomment below and update the code to test the property deltaDeposited
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property deltaWithdrawn (base name: "deltaWithdrawn")', function() {
      // uncomment below and update the code to test the property deltaWithdrawn
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property deltaAmount (base name: "deltaAmount")', function() {
      // uncomment below and update the code to test the property deltaAmount
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property deposited (base name: "deposited")', function() {
      // uncomment below and update the code to test the property deposited
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property withdrawn (base name: "withdrawn")', function() {
      // uncomment below and update the code to test the property withdrawn
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property pendingCredit (base name: "pendingCredit")', function() {
      // uncomment below and update the code to test the property pendingCredit
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property pendingDebit (base name: "pendingDebit")', function() {
      // uncomment below and update the code to test the property pendingDebit
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property confirmedDebit (base name: "confirmedDebit")', function() {
      // uncomment below and update the code to test the property confirmedDebit
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property addr (base name: "addr")', function() {
      // uncomment below and update the code to test the property addr
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

    it('should have the property withdrawalLock (base name: "withdrawalLock")', function() {
      // uncomment below and update the code to test the property withdrawalLock
      //var instane = new BitMexApi.Wallet();
      //expect(instance).to.be();
    });

  });

}));
