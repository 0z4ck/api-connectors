/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [Changelog](/app/apiChangelog)  ----  #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.model

import java.util.Date



case class Instrument (
  symbol: String,
rootSymbol: String,
state: String,
typ: String,
listing: Date,
front: Date,
expiry: Date,
settle: Date,
relistInterval: Date,
inverseLeg: String,
sellLeg: String,
buyLeg: String,
positionCurrency: String,
underlying: String,
quoteCurrency: String,
underlyingSymbol: String,
reference: String,
referenceSymbol: String,
calcInterval: Date,
publishInterval: Date,
publishTime: Date,
maxOrderQty: Number,
maxPrice: Double,
lotSize: Number,
tickSize: Double,
multiplier: Number,
settlCurrency: String,
underlyingToPositionMultiplier: Number,
underlyingToSettleMultiplier: Number,
quoteToSettleMultiplier: Number,
isQuanto: Boolean,
isInverse: Boolean,
initMargin: Double,
maintMargin: Double,
riskLimit: Number,
riskStep: Number,
limit: Double,
capped: Boolean,
taxed: Boolean,
deleverage: Boolean,
makerFee: Double,
takerFee: Double,
settlementFee: Double,
insuranceFee: Double,
fundingBaseSymbol: String,
fundingQuoteSymbol: String,
fundingPremiumSymbol: String,
fundingTimestamp: Date,
fundingInterval: Date,
fundingRate: Double,
indicativeFundingRate: Double,
rebalanceTimestamp: Date,
rebalanceInterval: Date,
openingTimestamp: Date,
closingTimestamp: Date,
sessionInterval: Date,
prevClosePrice: Double,
limitDownPrice: Double,
limitUpPrice: Double,
bankruptLimitDownPrice: Double,
bankruptLimitUpPrice: Double,
prevTotalVolume: Number,
totalVolume: Number,
volume: Number,
volume24h: Number,
prevTotalTurnover: Number,
totalTurnover: Number,
turnover: Number,
turnover24h: Number,
prevPrice24h: Double,
vwap: Double,
highPrice: Double,
lowPrice: Double,
lastPrice: Double,
lastPriceProtected: Double,
lastTickDirection: String,
lastChangePcnt: Double,
bidPrice: Double,
midPrice: Double,
askPrice: Double,
impactBidPrice: Double,
impactMidPrice: Double,
impactAskPrice: Double,
hasLiquidity: Boolean,
openInterest: Number,
openValue: Number,
fairMethod: String,
fairBasisRate: Double,
fairBasis: Double,
fairPrice: Double,
markMethod: String,
markPrice: Double,
indicativeTaxRate: Double,
indicativeSettlePrice: Double,
settledPrice: Double,
timestamp: Date)
