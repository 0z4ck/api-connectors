/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [Changelog](/app/apiChangelog)  ----  #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ---  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package bitmex;

import io.swagger.client.ApiException;
import io.swagger.client.api.OrderApi;
import io.swagger.client.model.Order;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.List;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

/**
 * API tests for OrderApi
 */
public class BitMexOrderApiTest {

    private final OrderApi api = new OrderApi();

    public BitMexOrderApiTest() throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException {
    }

    @Test
    public void orderLifeCycleTest() throws ApiException {

        orderCancelAllTest();

        //create order
        orderNewTest();

        //Check order
        orderGetActiveOrdersTest(1);

        //Cancel
        orderCancelAllTest();

        //check order again
        orderGetActiveOrdersTest(0);

        orderCancelAllTest();
    }

    public void orderCancelAllTest() throws ApiException {
        String symbol = null;
        String filter = null;
        String text = null;
        Object response = api.orderCancelAll(symbol, filter, text);

    }

    public void orderGetActiveOrdersTest(int orderCount) throws ApiException {
        String symbol = "XBTUSD";
        String filter = null;
        String columns = null;
        BigDecimal count = null;
        BigDecimal start = null;
        Boolean reverse = null;
        LocalDate startTime = null;
        LocalDate endTime = null;
        List<Order> response = api.orderGetOrders(symbol, filter, columns, count, start, reverse, startTime, endTime);

        int activeOrderCount = 0;
        for(Order order : response) {
            if(!order.getOrdStatus().equals("Canceled")) {
                activeOrderCount++;
            }
        }

        assertThat(activeOrderCount, is(orderCount));
    }

    public void orderNewTest() throws ApiException {
        String symbol = "XBTUSD";
        String side = "Buy";
        Double simpleOrderQty = 0.00001;
        BigDecimal quantity = null;
        BigDecimal orderQty = null;
        Double price = 1.0;
        BigDecimal displayQty = null;
        Double stopPrice = null;
        Double stopPx = null;
        String clOrdID = null;
        String clOrdLinkID = null;
        Double pegOffsetValue = null;
        String pegPriceType = null;
        String type = null;
        String ordType = null;
        String timeInForce = null;
        String execInst = null;
        String contingencyType = null;
        String text = null;
        Order response = api.orderNew(symbol, side, simpleOrderQty, quantity, orderQty, price, displayQty, stopPrice, stopPx, clOrdID, clOrdLinkID, pegOffsetValue, pegPriceType, type, ordType, timeInForce, execInst, contingencyType, text);

        assertThat(response.getSymbol(), is("XBTUSD"));
        assertThat(response.getPrice(), is(1.0));
        assertThat(response.getSimpleOrderQty(), is(0.00001));
    }

}
