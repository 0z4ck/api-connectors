/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.XAny;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;


/**
 * Wallet
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-04T11:15:54.597-06:00")
public class Wallet   {
  @JsonProperty("account")
  private BigDecimal account = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("prevDeposited")
  private BigDecimal prevDeposited = null;

  @JsonProperty("prevWithdrawn")
  private BigDecimal prevWithdrawn = null;

  @JsonProperty("prevAmount")
  private BigDecimal prevAmount = null;

  @JsonProperty("prevTimestamp")
  private DateTime prevTimestamp = null;

  @JsonProperty("deltaDeposited")
  private BigDecimal deltaDeposited = null;

  @JsonProperty("deltaWithdrawn")
  private BigDecimal deltaWithdrawn = null;

  @JsonProperty("deltaAmount")
  private BigDecimal deltaAmount = null;

  @JsonProperty("deposited")
  private BigDecimal deposited = null;

  @JsonProperty("withdrawn")
  private BigDecimal withdrawn = null;

  @JsonProperty("amount")
  private BigDecimal amount = null;

  @JsonProperty("pendingCredit")
  private BigDecimal pendingCredit = null;

  @JsonProperty("pendingDebit")
  private BigDecimal pendingDebit = null;

  @JsonProperty("confirmedDebit")
  private BigDecimal confirmedDebit = null;

  @JsonProperty("timestamp")
  private DateTime timestamp = null;

  @JsonProperty("addr")
  private String addr = null;

  @JsonProperty("withdrawalLock")
  private List<XAny> withdrawalLock = new ArrayList<XAny>();

  public Wallet account(BigDecimal account) {
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public BigDecimal getAccount() {
    return account;
  }

  public void setAccount(BigDecimal account) {
    this.account = account;
  }

  public Wallet currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public Wallet prevDeposited(BigDecimal prevDeposited) {
    this.prevDeposited = prevDeposited;
    return this;
  }

   /**
   * Get prevDeposited
   * @return prevDeposited
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getPrevDeposited() {
    return prevDeposited;
  }

  public void setPrevDeposited(BigDecimal prevDeposited) {
    this.prevDeposited = prevDeposited;
  }

  public Wallet prevWithdrawn(BigDecimal prevWithdrawn) {
    this.prevWithdrawn = prevWithdrawn;
    return this;
  }

   /**
   * Get prevWithdrawn
   * @return prevWithdrawn
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getPrevWithdrawn() {
    return prevWithdrawn;
  }

  public void setPrevWithdrawn(BigDecimal prevWithdrawn) {
    this.prevWithdrawn = prevWithdrawn;
  }

  public Wallet prevAmount(BigDecimal prevAmount) {
    this.prevAmount = prevAmount;
    return this;
  }

   /**
   * Get prevAmount
   * @return prevAmount
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getPrevAmount() {
    return prevAmount;
  }

  public void setPrevAmount(BigDecimal prevAmount) {
    this.prevAmount = prevAmount;
  }

  public Wallet prevTimestamp(DateTime prevTimestamp) {
    this.prevTimestamp = prevTimestamp;
    return this;
  }

   /**
   * Get prevTimestamp
   * @return prevTimestamp
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getPrevTimestamp() {
    return prevTimestamp;
  }

  public void setPrevTimestamp(DateTime prevTimestamp) {
    this.prevTimestamp = prevTimestamp;
  }

  public Wallet deltaDeposited(BigDecimal deltaDeposited) {
    this.deltaDeposited = deltaDeposited;
    return this;
  }

   /**
   * Get deltaDeposited
   * @return deltaDeposited
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getDeltaDeposited() {
    return deltaDeposited;
  }

  public void setDeltaDeposited(BigDecimal deltaDeposited) {
    this.deltaDeposited = deltaDeposited;
  }

  public Wallet deltaWithdrawn(BigDecimal deltaWithdrawn) {
    this.deltaWithdrawn = deltaWithdrawn;
    return this;
  }

   /**
   * Get deltaWithdrawn
   * @return deltaWithdrawn
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getDeltaWithdrawn() {
    return deltaWithdrawn;
  }

  public void setDeltaWithdrawn(BigDecimal deltaWithdrawn) {
    this.deltaWithdrawn = deltaWithdrawn;
  }

  public Wallet deltaAmount(BigDecimal deltaAmount) {
    this.deltaAmount = deltaAmount;
    return this;
  }

   /**
   * Get deltaAmount
   * @return deltaAmount
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getDeltaAmount() {
    return deltaAmount;
  }

  public void setDeltaAmount(BigDecimal deltaAmount) {
    this.deltaAmount = deltaAmount;
  }

  public Wallet deposited(BigDecimal deposited) {
    this.deposited = deposited;
    return this;
  }

   /**
   * Get deposited
   * @return deposited
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getDeposited() {
    return deposited;
  }

  public void setDeposited(BigDecimal deposited) {
    this.deposited = deposited;
  }

  public Wallet withdrawn(BigDecimal withdrawn) {
    this.withdrawn = withdrawn;
    return this;
  }

   /**
   * Get withdrawn
   * @return withdrawn
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getWithdrawn() {
    return withdrawn;
  }

  public void setWithdrawn(BigDecimal withdrawn) {
    this.withdrawn = withdrawn;
  }

  public Wallet amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public Wallet pendingCredit(BigDecimal pendingCredit) {
    this.pendingCredit = pendingCredit;
    return this;
  }

   /**
   * Get pendingCredit
   * @return pendingCredit
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getPendingCredit() {
    return pendingCredit;
  }

  public void setPendingCredit(BigDecimal pendingCredit) {
    this.pendingCredit = pendingCredit;
  }

  public Wallet pendingDebit(BigDecimal pendingDebit) {
    this.pendingDebit = pendingDebit;
    return this;
  }

   /**
   * Get pendingDebit
   * @return pendingDebit
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getPendingDebit() {
    return pendingDebit;
  }

  public void setPendingDebit(BigDecimal pendingDebit) {
    this.pendingDebit = pendingDebit;
  }

  public Wallet confirmedDebit(BigDecimal confirmedDebit) {
    this.confirmedDebit = confirmedDebit;
    return this;
  }

   /**
   * Get confirmedDebit
   * @return confirmedDebit
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getConfirmedDebit() {
    return confirmedDebit;
  }

  public void setConfirmedDebit(BigDecimal confirmedDebit) {
    this.confirmedDebit = confirmedDebit;
  }

  public Wallet timestamp(DateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @ApiModelProperty(example = "null", value = "")
  public DateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(DateTime timestamp) {
    this.timestamp = timestamp;
  }

  public Wallet addr(String addr) {
    this.addr = addr;
    return this;
  }

   /**
   * Get addr
   * @return addr
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getAddr() {
    return addr;
  }

  public void setAddr(String addr) {
    this.addr = addr;
  }

  public Wallet withdrawalLock(List<XAny> withdrawalLock) {
    this.withdrawalLock = withdrawalLock;
    return this;
  }

   /**
   * Get withdrawalLock
   * @return withdrawalLock
  **/
  @ApiModelProperty(example = "null", value = "")
  public List<XAny> getWithdrawalLock() {
    return withdrawalLock;
  }

  public void setWithdrawalLock(List<XAny> withdrawalLock) {
    this.withdrawalLock = withdrawalLock;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Wallet wallet = (Wallet) o;
    return Objects.equals(this.account, wallet.account) &&
        Objects.equals(this.currency, wallet.currency) &&
        Objects.equals(this.prevDeposited, wallet.prevDeposited) &&
        Objects.equals(this.prevWithdrawn, wallet.prevWithdrawn) &&
        Objects.equals(this.prevAmount, wallet.prevAmount) &&
        Objects.equals(this.prevTimestamp, wallet.prevTimestamp) &&
        Objects.equals(this.deltaDeposited, wallet.deltaDeposited) &&
        Objects.equals(this.deltaWithdrawn, wallet.deltaWithdrawn) &&
        Objects.equals(this.deltaAmount, wallet.deltaAmount) &&
        Objects.equals(this.deposited, wallet.deposited) &&
        Objects.equals(this.withdrawn, wallet.withdrawn) &&
        Objects.equals(this.amount, wallet.amount) &&
        Objects.equals(this.pendingCredit, wallet.pendingCredit) &&
        Objects.equals(this.pendingDebit, wallet.pendingDebit) &&
        Objects.equals(this.confirmedDebit, wallet.confirmedDebit) &&
        Objects.equals(this.timestamp, wallet.timestamp) &&
        Objects.equals(this.addr, wallet.addr) &&
        Objects.equals(this.withdrawalLock, wallet.withdrawalLock);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, currency, prevDeposited, prevWithdrawn, prevAmount, prevTimestamp, deltaDeposited, deltaWithdrawn, deltaAmount, deposited, withdrawn, amount, pendingCredit, pendingDebit, confirmedDebit, timestamp, addr, withdrawalLock);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Wallet {\n");
    
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    prevDeposited: ").append(toIndentedString(prevDeposited)).append("\n");
    sb.append("    prevWithdrawn: ").append(toIndentedString(prevWithdrawn)).append("\n");
    sb.append("    prevAmount: ").append(toIndentedString(prevAmount)).append("\n");
    sb.append("    prevTimestamp: ").append(toIndentedString(prevTimestamp)).append("\n");
    sb.append("    deltaDeposited: ").append(toIndentedString(deltaDeposited)).append("\n");
    sb.append("    deltaWithdrawn: ").append(toIndentedString(deltaWithdrawn)).append("\n");
    sb.append("    deltaAmount: ").append(toIndentedString(deltaAmount)).append("\n");
    sb.append("    deposited: ").append(toIndentedString(deposited)).append("\n");
    sb.append("    withdrawn: ").append(toIndentedString(withdrawn)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    pendingCredit: ").append(toIndentedString(pendingCredit)).append("\n");
    sb.append("    pendingDebit: ").append(toIndentedString(pendingDebit)).append("\n");
    sb.append("    confirmedDebit: ").append(toIndentedString(confirmedDebit)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    addr: ").append(toIndentedString(addr)).append("\n");
    sb.append("    withdrawalLock: ").append(toIndentedString(withdrawalLock)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

