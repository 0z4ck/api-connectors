/**
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [Changelog](/app/apiChangelog)    #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  -  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import org.joda.time.DateTime;


/**
 * Settlement
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-04T11:15:54.597-06:00")
public class Settlement   {
  @JsonProperty("timestamp")
  private DateTime timestamp = null;

  @JsonProperty("symbol")
  private String symbol = null;

  @JsonProperty("settlementType")
  private String settlementType = null;

  @JsonProperty("settledPrice")
  private Double settledPrice = null;

  @JsonProperty("bankrupt")
  private BigDecimal bankrupt = null;

  @JsonProperty("taxBase")
  private BigDecimal taxBase = null;

  @JsonProperty("taxRate")
  private Double taxRate = null;

  public Settlement timestamp(DateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public DateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(DateTime timestamp) {
    this.timestamp = timestamp;
  }

  public Settlement symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  @ApiModelProperty(example = "null", required = true, value = "")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public Settlement settlementType(String settlementType) {
    this.settlementType = settlementType;
    return this;
  }

   /**
   * Get settlementType
   * @return settlementType
  **/
  @ApiModelProperty(example = "null", value = "")
  public String getSettlementType() {
    return settlementType;
  }

  public void setSettlementType(String settlementType) {
    this.settlementType = settlementType;
  }

  public Settlement settledPrice(Double settledPrice) {
    this.settledPrice = settledPrice;
    return this;
  }

   /**
   * Get settledPrice
   * @return settledPrice
  **/
  @ApiModelProperty(example = "null", value = "")
  public Double getSettledPrice() {
    return settledPrice;
  }

  public void setSettledPrice(Double settledPrice) {
    this.settledPrice = settledPrice;
  }

  public Settlement bankrupt(BigDecimal bankrupt) {
    this.bankrupt = bankrupt;
    return this;
  }

   /**
   * Get bankrupt
   * @return bankrupt
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getBankrupt() {
    return bankrupt;
  }

  public void setBankrupt(BigDecimal bankrupt) {
    this.bankrupt = bankrupt;
  }

  public Settlement taxBase(BigDecimal taxBase) {
    this.taxBase = taxBase;
    return this;
  }

   /**
   * Get taxBase
   * @return taxBase
  **/
  @ApiModelProperty(example = "null", value = "")
  public BigDecimal getTaxBase() {
    return taxBase;
  }

  public void setTaxBase(BigDecimal taxBase) {
    this.taxBase = taxBase;
  }

  public Settlement taxRate(Double taxRate) {
    this.taxRate = taxRate;
    return this;
  }

   /**
   * Get taxRate
   * @return taxRate
  **/
  @ApiModelProperty(example = "null", value = "")
  public Double getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(Double taxRate) {
    this.taxRate = taxRate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Settlement settlement = (Settlement) o;
    return Objects.equals(this.timestamp, settlement.timestamp) &&
        Objects.equals(this.symbol, settlement.symbol) &&
        Objects.equals(this.settlementType, settlement.settlementType) &&
        Objects.equals(this.settledPrice, settlement.settledPrice) &&
        Objects.equals(this.bankrupt, settlement.bankrupt) &&
        Objects.equals(this.taxBase, settlement.taxBase) &&
        Objects.equals(this.taxRate, settlement.taxRate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, symbol, settlementType, settledPrice, bankrupt, taxBase, taxRate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Settlement {\n");
    
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    settlementType: ").append(toIndentedString(settlementType)).append("\n");
    sb.append("    settledPrice: ").append(toIndentedString(settledPrice)).append("\n");
    sb.append("    bankrupt: ").append(toIndentedString(bankrupt)).append("\n");
    sb.append("    taxBase: ").append(toIndentedString(taxBase)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

