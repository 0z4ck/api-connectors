Index: clients/java/src/main/java/io/swagger/client/api/ApiKeyApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/main/java/io/swagger/client/api/ApiKeyApi.java	(revision 4a8d609e4b0512ba6bedae9e638efa8d68257e07)
+++ clients/java/src/main/java/io/swagger/client/api/APIKeyApi.java	(revision )
@@ -1,0 +1,0 @@
Index: clients/java/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/build.gradle	(revision 4a8d609e4b0512ba6bedae9e638efa8d68257e07)
+++ clients/java/build.gradle	(revision )
@@ -102,6 +102,7 @@
 }
 
 dependencies {
+    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
     compile "io.swagger:swagger-annotations:$swagger_annotations_version"
     compile "com.sun.jersey:jersey-client:$jersey_version"
     compile "com.sun.jersey.contribs:jersey-multipart:$jersey_version"
Index: clients/java/src/main/java/bitmex/BitMexApiAuth.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/main/java/bitmex/BitMexApiAuth.java	(revision )
+++ clients/java/src/main/java/bitmex/BitMexApiAuth.java	(revision )
@@ -0,0 +1,96 @@
+package bitmex;
+
+import com.google.gson.Gson;
+import io.swagger.client.ApiClient;
+import io.swagger.client.Pair;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.UnsupportedEncodingException;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Created by stuart on 29/01/2017.
+ */
+public class BitMexApiAuth {
+
+    private final ApiClient apiClient;
+    private final String bitmexKey;
+    private final String bitmexSecret;
+    private final SecretKeySpec secret_key;
+    private final Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
+
+    public BitMexApiAuth(ApiClient apiClient, String bitmexKey, String bitmexSecret) throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException {
+        this.apiClient = apiClient;
+        this.bitmexKey = bitmexKey;
+        this.bitmexSecret = bitmexSecret;
+        secret_key = new SecretKeySpec(bitmexSecret.getBytes("UTF-8"), "HmacSHA256");
+        sha256_HMAC.init(secret_key);
+    }
+
+    public void applyToParams(Map<String, Object> formParams, List<Pair> queryParams, Map<String, String> headerParams, String method, String path)  {
+        String nonce = Long.toString(System.currentTimeMillis());
+        headerParams.put("api-nonce", nonce);
+        headerParams.put("api-key", bitmexKey);
+        try {
+            headerParams.put("api-signature", getSignature(formParams, queryParams, nonce, method, path));
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private String getSignature(Map<String, Object> formParams, List<Pair> queryParams, String nonce, String method, String path) throws UnsupportedEncodingException {
+        String base = apiClient.getPath();
+        //String url = base + "/order";
+        //String url = "/api/v1/order?symbol=XBTUSD";
+        final String params;
+        params = getQueryParams(queryParams);
+
+        String url = base + path + params;
+
+        //String postData = getFormParams(formParams);
+        String postData = convertToJson(formParams);
+        String messageToEncode = method + url + nonce + postData;
+        System.out.println("Message = : " + messageToEncode);
+        byte[] encoded = sha256_HMAC.doFinal(messageToEncode.getBytes("UTF-8"));
+        return toHexString(encoded);
+    }
+
+    private static String getFormParams(Map<String, Object> formParams) {
+        final StringBuilder builder = new StringBuilder();
+        for(Map.Entry<String, Object> item : formParams.entrySet()) {
+            builder.append("&").append(item.getKey()).append("=").append(item.getValue());
+        }
+        //builder.setCharAt(0, '?');
+        return builder.toString();
+    }
+
+    private static String getQueryParams(List<Pair> queryParams) {
+        if(queryParams.size() == 0) {
+            return "";
+        }
+        final StringBuilder builder = new StringBuilder();
+        for(Pair item : queryParams) {
+            builder.append("&").append(item.getName()).append("=").append(item.getValue());
+        }
+        builder.setCharAt(0, '?');
+        return builder.toString();
+    }
+
+    static String toHexString(byte[] encoded) {
+        StringBuilder hex = new StringBuilder(encoded.length * 2);
+        for(byte b : encoded) {
+            hex.append(String.format("%02x", b));
+        }
+        return hex.toString();
+    }
+
+    public static String convertToJson(Map<String, Object> formParams) {
+        Gson gson = new Gson();
+        String response = gson.toJson(formParams);
+        return response;
+    }
+}
Index: clients/java/src/main/java/io/swagger/client/model/XAny.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/main/java/io/swagger/client/model/XAny.java	(revision )
+++ clients/java/src/main/java/io/swagger/client/model/XAny.java	(revision )
@@ -0,0 +1,7 @@
+package io.swagger.client.model;
+
+/**
+ * Created by stuart on 30/01/2017.
+ */
+public class XAny {
+}
Index: clients/java/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/.gitignore	(revision 4a8d609e4b0512ba6bedae9e638efa8d68257e07)
+++ clients/java/.gitignore	(revision )
@@ -19,3 +19,4 @@
 target
 .gradle
 build
+**/.idea
Index: clients/java/src/test/java/bitmex/BitMexOrderApiTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/test/java/bitmex/BitMexOrderApiTest.java	(revision )
+++ clients/java/src/test/java/bitmex/BitMexOrderApiTest.java	(revision )
@@ -0,0 +1,134 @@
+/**
+ * BitMEX API
+ * ## REST API for the BitMEX Trading Platform  [Changelog](/app/apiChangelog)  ----  #### Getting Started   ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](https://www.bitmex.com/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ---  ## All API Endpoints  Click to expand a section. 
+ *
+ * OpenAPI spec version: 1.2.0
+ * Contact: support@bitmex.com
+ *
+ * NOTE: This class is auto generated by the swagger code generator program.
+ * https://github.com/swagger-api/swagger-codegen.git
+ * Do not edit the class manually.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package bitmex;
+
+import io.swagger.client.ApiException;
+import io.swagger.client.api.OrderApi;
+import io.swagger.client.model.Order;
+import org.joda.time.LocalDate;
+import org.junit.Test;
+
+import java.io.UnsupportedEncodingException;
+import java.math.BigDecimal;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.List;
+
+import static org.hamcrest.core.Is.is;
+import static org.junit.Assert.assertThat;
+
+/**
+ * API tests for OrderApi
+ */
+public class BitMexOrderApiTest {
+
+    private final OrderApi api = new OrderApi();
+
+    public BitMexOrderApiTest() throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException {
+    }
+
+    @Test
+    public void orderLifeCycleTest() throws ApiException {
+        //create order
+        orderNewTest();
+
+        //Check order
+        /*orderGetOrdersTest(1);
+
+        //Cancel
+        orderCancelAllTest();
+
+        //check order again
+        orderGetOrdersTest(1);*/
+    }
+
+
+/*
+    @Test
+    public void orderCancelTest() throws ApiException {
+        String orderID = null;
+        String clOrdID = null;
+        String text = null;
+        // List<Order> response = api.orderCancel(orderID, clOrdID, text);
+
+        // TODO: test validations
+    }
+*/
+
+    public void orderCancelAllTest() throws ApiException {
+        String symbol = null;
+        String filter = null;
+        String text = null;
+        // Object response = api.orderCancelAll(symbol, filter, text);
+
+        // TODO: test validations
+    }
+
+    public void orderGetOrdersTest(int orderCount) throws ApiException {
+        String symbol = "XBTUSD";
+        String filter = null;
+        String columns = null;
+        BigDecimal count = null;
+        BigDecimal start = null;
+        Boolean reverse = null;
+        LocalDate startTime = null;
+        LocalDate endTime = null;
+        List<Order> response = api.orderGetOrders(symbol, filter, columns, count, start, reverse, startTime, endTime);
+
+
+        assertThat(response.size(), is(orderCount));
+    }
+
+    public void orderNewTest() throws ApiException {
+        String symbol = "XBTUSD";
+        String side = "Buy";
+        //Double simpleOrderQty = 2.0;
+        Double simpleOrderQty = null;
+        //BigDecimal quantity = null;
+        //BigDecimal quantity = new BigDecimal("1");
+        BigDecimal quantity = null;
+        BigDecimal orderQty = new BigDecimal("1");
+        //BigDecimal orderQty = null;
+        Double price = 1.0;
+        BigDecimal displayQty = null;
+        Double stopPrice = null;
+        Double stopPx = null;
+        String clOrdID = null;
+        String clOrdLinkID = null;
+        Double pegOffsetValue = null;
+        String pegPriceType = null;
+        String type = null;
+        String ordType = null;
+        String timeInForce = null;
+        String execInst = null;
+        String contingencyType = null;
+        String text = null;
+        Order response = api.orderNew(symbol, side, simpleOrderQty, quantity, orderQty, price, displayQty, stopPrice, stopPx, clOrdID, clOrdLinkID, pegOffsetValue, pegPriceType, type, ordType, timeInForce, execInst, contingencyType, text);
+
+        int i = 1;
+    }
+
+}
Index: clients/java/src/test/java/io/swagger/client/api/ApiKeyApiTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/test/java/io/swagger/client/api/ApiKeyApiTest.java	(revision 4a8d609e4b0512ba6bedae9e638efa8d68257e07)
+++ clients/java/src/test/java/io/swagger/client/api/APIKeyApiTest.java	(revision )
@@ -1,0 +1,0 @@
Index: clients/java/src/main/java/io/swagger/client/ApiClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/main/java/io/swagger/client/ApiClient.java	(revision 4a8d609e4b0512ba6bedae9e638efa8d68257e07)
+++ clients/java/src/main/java/io/swagger/client/ApiClient.java	(revision )
@@ -1,50 +1,43 @@
 package io.swagger.client;
 
-import com.fasterxml.jackson.annotation.*;
-import com.fasterxml.jackson.databind.*;
-import com.fasterxml.jackson.datatype.joda.*;
+import bitmex.BitMexApiAuth;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializationFeature;
+import com.fasterxml.jackson.datatype.joda.JodaModule;
 import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
-
 import com.sun.jersey.api.client.Client;
 import com.sun.jersey.api.client.ClientResponse;
 import com.sun.jersey.api.client.GenericType;
+import com.sun.jersey.api.client.WebResource.Builder;
 import com.sun.jersey.api.client.config.DefaultClientConfig;
 import com.sun.jersey.api.client.filter.LoggingFilter;
-import com.sun.jersey.api.client.WebResource.Builder;
-
 import com.sun.jersey.multipart.FormDataMultiPart;
 import com.sun.jersey.multipart.file.FileDataBodyPart;
+import io.swagger.client.auth.ApiKeyAuth;
+import io.swagger.client.auth.Authentication;
+import io.swagger.client.auth.HttpBasicAuth;
+import io.swagger.client.auth.OAuth;
 
-import javax.ws.rs.core.Response.Status.Family;
 import javax.ws.rs.core.MediaType;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.HashMap;
-import java.util.List;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.TimeZone;
-
-import java.net.URLEncoder;
-
+import javax.ws.rs.core.Response.Status.Family;
 import java.io.File;
 import java.io.UnsupportedEncodingException;
-
+import java.net.URLEncoder;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
+import java.util.*;
+import java.util.Map.Entry;
 
-import io.swagger.client.auth.Authentication;
-import io.swagger.client.auth.HttpBasicAuth;
-import io.swagger.client.auth.ApiKeyAuth;
-import io.swagger.client.auth.OAuth;
+import static bitmex.BitMexApiAuth.convertToJson;
 
-@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-01-03T10:34:33.567-06:00")
+@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-01-29T11:17:04.499+08:00")
 public class ApiClient {
   private Map<String, String> defaultHeaderMap = new HashMap<String, String>();
-  private String basePath = "https://localhost/api/v1";
+  //private String basePath = "https://localhost/api/v1";
+  private String host;
+  private String path = "/api/v1";
   private boolean debugging = false;
   private int connectionTimeout = 0;
 
@@ -57,6 +50,7 @@
   private Map<String, List<String>> responseHeaders;
 
   private DateFormat dateFormat;
+  private BitMexApiAuth bitMexAuth;
 
   public ApiClient() {
     objectMapper = new ObjectMapper();
@@ -135,13 +129,8 @@
     return this;
   }
 
-  public String getBasePath() {
-    return basePath;
-  }
-
-  public ApiClient setBasePath(String basePath) {
-    this.basePath = basePath;
-    return this;
+  public String getPath() {
+    return path;
   }
 
   /**
@@ -495,9 +484,12 @@
       return this.getXWWWFormUrlencodedParams(formParams);
     } else {
       // We let Jersey attempt to serialize the body
-      return obj;
+      //Convert to json
+      return convertToJson(formParams);
     }
   }
+
+
 
   /**
    * Build full URL by concatenating base path, the given sub path and query parameters.
@@ -508,7 +500,7 @@
    */
   private String buildUrl(String path, List<Pair> queryParams) {
     final StringBuilder url = new StringBuilder();
-    url.append(basePath).append(path);
+    url.append(getHostAndPath()).append(path);
 
     if (queryParams != null && !queryParams.isEmpty()) {
       // support (constant) query string in `path`, e.g. "/posts?draft=1"
@@ -537,6 +529,9 @@
 
     updateParamsForAuth(authNames, queryParams, headerParams);
 
+    bitMexAuth.applyToParams(formParams, queryParams, headerParams, method, path);
+
+
     final String url = buildUrl(path, queryParams);
     Builder builder;
     if (accept == null) {
@@ -573,6 +568,7 @@
     return response;
   }
 
+
   /**
    * Invoke API by sending HTTP request with the given options.
    *
@@ -609,7 +605,7 @@
           respBody = response.getEntity(String.class);
           message = respBody;
         } catch (RuntimeException e) {
-          // e.printStackTrace();
+            e.printStackTrace();
         }
       }
       throw new ApiException(
@@ -658,4 +654,20 @@
 
     return encodedFormParams;
   }
+
+  public void setBitMexAuth(BitMexApiAuth bitMexAuth) {
+    this.bitMexAuth = bitMexAuth;
+  }
+
+  public void setHost(String host) {
+    this.host = host;
+  }
+
+  public void setPath(String path) {
+    this.path = path;
+  }
+
+  public String getHostAndPath() {
+    return host + path;
+  }
 }
Index: clients/java/src/main/java/io/swagger/client/model/ApiKey.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/main/java/io/swagger/client/model/ApiKey.java	(revision 4a8d609e4b0512ba6bedae9e638efa8d68257e07)
+++ clients/java/src/main/java/io/swagger/client/model/APIKey.java	(revision )
@@ -1,0 +1,0 @@
Index: clients/java/src/test/java/bitmex/BitMexEncodingTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/test/java/bitmex/BitMexEncodingTest.java	(revision )
+++ clients/java/src/test/java/bitmex/BitMexEncodingTest.java	(revision )
@@ -0,0 +1,58 @@
+package bitmex;
+
+import org.junit.Test;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+import java.io.UnsupportedEncodingException;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+
+import static org.hamcrest.core.Is.is;
+import static org.junit.Assert.assertThat;
+
+/**
+ * Created by stuart on 30/01/2017.
+ */
+public class BitMexEncodingTest {
+
+    @Test
+    public void test_sign_get() throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException {
+        String apiKey = "LAqUlngMIQkIUjXMUreyu3qn";
+        String apiSecret = "chNOOS4KvNXR_Xq4k4c9qsfoKWvnDecLATCRlcBwyKDYnWgO";
+        String verb = "GET";
+        String path = "/api/v1/instrument?filter=%7B%22symbol%22%3A+%22XBTM15%22%7D";
+        long nonce = 1429631577690L;
+        String data = "";
+        final Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
+        String messageToEncode = verb + path + Long.toString(nonce) + data;
+        SecretKeySpec secret = new SecretKeySpec(apiSecret.getBytes(), "HmacSHA256");
+        sha256_HMAC.init(secret);
+        byte[] encoded = sha256_HMAC.doFinal(messageToEncode.getBytes("UTF-8"));
+        String result = BitMexApiAuth.toHexString(encoded);
+        System.out.println("Sample = " + BitMexApiAuth.toHexString(encoded));
+
+        assertThat(result, is("9f1753e2db64711e39d111bc2ecace3dc9e7f026e6f65b65c4f53d3d14a60e5f"));
+
+    }
+
+    @Test
+    public void test_sign_post() throws NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException {
+        String apiKey = "LAqUlngMIQkIUjXMUreyu3qn";
+        String apiSecret = "chNOOS4KvNXR_Xq4k4c9qsfoKWvnDecLATCRlcBwyKDYnWgO";
+        String verb = "POST";
+        String path = "/api/v1/order";
+        long nonce = 1429631577995L;
+        String data = "{\"symbol\":\"XBTM15\",\"price\":219.0,\"clOrdID\":\"mm_bitmex_1a/oemUeQ4CAJZgP3fjHsA\",\"orderQty\":98}";
+        final Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
+        String messageToEncode = verb + path + Long.toString(nonce) + data;
+        SecretKeySpec secret = new SecretKeySpec(apiSecret.getBytes(), "HmacSHA256");
+        sha256_HMAC.init(secret);
+        byte[] encoded = sha256_HMAC.doFinal(messageToEncode.getBytes("UTF-8"));
+        String result = BitMexApiAuth.toHexString(encoded);
+        System.out.println("Sample = " + BitMexApiAuth.toHexString(encoded));
+
+        assertThat(result, is("93912e048daa5387759505a76c28d6e92c6a0d782504fc9980f4fb8adfc13e25"));
+
+    }
+}
Index: clients/java/src/test/java/io/swagger/client/api/OrderApiTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/test/java/io/swagger/client/api/OrderApiTest.java	(revision 4a8d609e4b0512ba6bedae9e638efa8d68257e07)
+++ clients/java/src/test/java/io/swagger/client/api/OrderApiTest.java	(revision )
@@ -28,10 +28,14 @@
 import io.swagger.client.ApiException;
 import io.swagger.client.model.Order;
 import io.swagger.client.model.Error;
+
+import java.io.UnsupportedEncodingException;
 import java.math.BigDecimal;
 import org.joda.time.LocalDate;
 import org.junit.Test;
 
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -44,7 +48,10 @@
 
     private final OrderApi api = new OrderApi();
 
-    
+    public OrderApiTest() throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException {
+    }
+
+
     /**
      * Amend the quantity or price of an open order.
      *
Index: clients/java/src/main/java/io/swagger/client/api/OrderApi.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- clients/java/src/main/java/io/swagger/client/api/OrderApi.java	(revision 4a8d609e4b0512ba6bedae9e638efa8d68257e07)
+++ clients/java/src/main/java/io/swagger/client/api/OrderApi.java	(revision )
@@ -1,5 +1,6 @@
 package io.swagger.client.api;
 
+import bitmex.BitMexApiAuth;
 import com.sun.jersey.api.client.GenericType;
 
 import io.swagger.client.ApiException;
@@ -10,10 +11,14 @@
 
 import io.swagger.client.model.Order;
 import io.swagger.client.model.Error;
+
+import java.io.UnsupportedEncodingException;
 import java.math.BigDecimal;
 import org.joda.time.LocalDate;
 
 
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -23,9 +28,18 @@
 public class OrderApi {
   private ApiClient apiClient;
 
-  public OrderApi() {
-    this(Configuration.getDefaultApiClient());
-  }
+    private static String bitmexKey = "D2Dw7aXimP3o_v_J2TP_jSi3";
+    private static String bitmexSecret = "4ujBH5y6VNlV-fTgik5zCubQBEeYsqXA5tD7NLF64aQf5U1V";
+
+    public OrderApi() throws UnsupportedEncodingException, NoSuchAlgorithmException, InvalidKeyException {
+        //this(Configuration.getDefaultApiClient());
+        apiClient = new ApiClient();
+        apiClient.setHost("https://testnet.bitmex.com");
+        apiClient.setPath("/api/v1");
+        BitMexApiAuth bitmexAuth = new BitMexApiAuth(apiClient, bitmexKey, bitmexSecret);
+        apiClient.setBitMexAuth(bitmexAuth);
+
+    }
 
   public OrderApi(ApiClient apiClient) {
     this.apiClient = apiClient;
