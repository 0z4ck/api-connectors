<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class TradeApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  /**
	 * getBucketed
	 * Get previous trades bucketed by seconds.
   * symbol, string: Instrument name. (required)

   * startTime, DateTime: Start date. Expects ISO formatted date strings. (optional)

   * endTime, DateTime: End Date. Expects ISO formatted date strings. (optional)

   * count, float: Number of buckets to fetch. (optional)

   * useMillisecondTime, bool: Return dates in milliseconds (GMT). Useful for charting. (optional)

   * binSize, string: Time interval to bucket by. Available options: ['30s', '1m', '5m', '1h', '1d']. (optional)

   * @return Array[TradeBin]
	 */

   public function getBucketed($symbol, $startTime=null, $endTime=null, $count=null, $useMillisecondTime=null, $binSize=null) {

  		//parse inputs
  		$resourcePath = "/trade/bucketed";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($symbol != null) {
  		  $queryParams['symbol'] = $this->apiClient->toQueryValue($symbol);
  		}
  		if($binSize != null) {
  		  $queryParams['binSize'] = $this->apiClient->toQueryValue($binSize);
  		}
  		if($startTime != null) {
  		  $queryParams['startTime'] = $this->apiClient->toQueryValue($startTime);
  		}
  		if($endTime != null) {
  		  $queryParams['endTime'] = $this->apiClient->toQueryValue($endTime);
  		}
  		if($count != null) {
  		  $queryParams['count'] = $this->apiClient->toQueryValue($count);
  		}
  		if($useMillisecondTime != null) {
  		  $queryParams['useMillisecondTime'] = $this->apiClient->toQueryValue($useMillisecondTime);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[TradeBin]');
  		return $responseObject;

      }
  /**
	 * getByDate
	 * Get trades between two dates.
   * symbol, string: Instrument name. (optional)

   * startTime, DateTime: Start date. (required)

   * endTime, DateTime: End Date. (optional)

   * @return Array[Trade]
	 */

   public function getByDate($symbol=null, $startTime, $endTime=null) {

  		//parse inputs
  		$resourcePath = "/trade/byDate";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($symbol != null) {
  		  $queryParams['symbol'] = $this->apiClient->toQueryValue($symbol);
  		}
  		if($startTime != null) {
  		  $queryParams['startTime'] = $this->apiClient->toQueryValue($startTime);
  		}
  		if($endTime != null) {
  		  $queryParams['endTime'] = $this->apiClient->toQueryValue($endTime);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Trade]');
  		return $responseObject;

      }
  /**
	 * getRecent
	 * Get recent trades.
   * symbol, string: Instrument name. (optional)

   * count, float: Number of trades to fetch (required)

   * @return Array[Trade]
	 */

   public function getRecent($symbol=null, $count) {

  		//parse inputs
  		$resourcePath = "/trade/recent";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($symbol != null) {
  		  $queryParams['symbol'] = $this->apiClient->toQueryValue($symbol);
  		}
  		if($count != null) {
  		  $queryParams['count'] = $this->apiClient->toQueryValue($count);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Trade]');
  		return $responseObject;

      }
  

}

