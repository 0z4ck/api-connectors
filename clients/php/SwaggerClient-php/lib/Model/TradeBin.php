<?php
/**
 * TradeBin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * TradeBin Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TradeBin implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'timestamp' => '\DateTime',
        'symbol' => 'string',
        'open' => 'double',
        'high' => 'double',
        'low' => 'double',
        'close' => 'double',
        'trades' => 'Number',
        'volume' => 'Number',
        'vwap' => 'double',
        'last_size' => 'Number',
        'turnover' => 'Number',
        'home_notional' => 'double',
        'foreign_notional' => 'double',
        'id' => 'double'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'timestamp' => 'timestamp',
        'symbol' => 'symbol',
        'open' => 'open',
        'high' => 'high',
        'low' => 'low',
        'close' => 'close',
        'trades' => 'trades',
        'volume' => 'volume',
        'vwap' => 'vwap',
        'last_size' => 'lastSize',
        'turnover' => 'turnover',
        'home_notional' => 'homeNotional',
        'foreign_notional' => 'foreignNotional',
        'id' => 'id'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'timestamp' => 'setTimestamp',
        'symbol' => 'setSymbol',
        'open' => 'setOpen',
        'high' => 'setHigh',
        'low' => 'setLow',
        'close' => 'setClose',
        'trades' => 'setTrades',
        'volume' => 'setVolume',
        'vwap' => 'setVwap',
        'last_size' => 'setLastSize',
        'turnover' => 'setTurnover',
        'home_notional' => 'setHomeNotional',
        'foreign_notional' => 'setForeignNotional',
        'id' => 'setId'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'timestamp' => 'getTimestamp',
        'symbol' => 'getSymbol',
        'open' => 'getOpen',
        'high' => 'getHigh',
        'low' => 'getLow',
        'close' => 'getClose',
        'trades' => 'getTrades',
        'volume' => 'getVolume',
        'vwap' => 'getVwap',
        'last_size' => 'getLastSize',
        'turnover' => 'getTurnover',
        'home_notional' => 'getHomeNotional',
        'foreign_notional' => 'getForeignNotional',
        'id' => 'getId'
    );
  
    
    /**
      * $timestamp 
      * @var \DateTime
      */
    protected $timestamp;
    
    /**
      * $symbol 
      * @var string
      */
    protected $symbol;
    
    /**
      * $open 
      * @var double
      */
    protected $open;
    
    /**
      * $high 
      * @var double
      */
    protected $high;
    
    /**
      * $low 
      * @var double
      */
    protected $low;
    
    /**
      * $close 
      * @var double
      */
    protected $close;
    
    /**
      * $trades 
      * @var Number
      */
    protected $trades;
    
    /**
      * $volume 
      * @var Number
      */
    protected $volume;
    
    /**
      * $vwap 
      * @var double
      */
    protected $vwap;
    
    /**
      * $last_size 
      * @var Number
      */
    protected $last_size;
    
    /**
      * $turnover 
      * @var Number
      */
    protected $turnover;
    
    /**
      * $home_notional 
      * @var double
      */
    protected $home_notional;
    
    /**
      * $foreign_notional 
      * @var double
      */
    protected $foreign_notional;
    
    /**
      * $id 
      * @var double
      */
    protected $id;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->timestamp = $data["timestamp"];
            $this->symbol = $data["symbol"];
            $this->open = $data["open"];
            $this->high = $data["high"];
            $this->low = $data["low"];
            $this->close = $data["close"];
            $this->trades = $data["trades"];
            $this->volume = $data["volume"];
            $this->vwap = $data["vwap"];
            $this->last_size = $data["last_size"];
            $this->turnover = $data["turnover"];
            $this->home_notional = $data["home_notional"];
            $this->foreign_notional = $data["foreign_notional"];
            $this->id = $data["id"];
        }
    }
    
    /**
     * Gets timestamp
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }
  
    /**
     * Sets timestamp
     * @param \DateTime $timestamp 
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        
        $this->timestamp = $timestamp;
        return $this;
    }
    
    /**
     * Gets symbol
     * @return string
     */
    public function getSymbol()
    {
        return $this->symbol;
    }
  
    /**
     * Sets symbol
     * @param string $symbol 
     * @return $this
     */
    public function setSymbol($symbol)
    {
        
        $this->symbol = $symbol;
        return $this;
    }
    
    /**
     * Gets open
     * @return double
     */
    public function getOpen()
    {
        return $this->open;
    }
  
    /**
     * Sets open
     * @param double $open 
     * @return $this
     */
    public function setOpen($open)
    {
        
        $this->open = $open;
        return $this;
    }
    
    /**
     * Gets high
     * @return double
     */
    public function getHigh()
    {
        return $this->high;
    }
  
    /**
     * Sets high
     * @param double $high 
     * @return $this
     */
    public function setHigh($high)
    {
        
        $this->high = $high;
        return $this;
    }
    
    /**
     * Gets low
     * @return double
     */
    public function getLow()
    {
        return $this->low;
    }
  
    /**
     * Sets low
     * @param double $low 
     * @return $this
     */
    public function setLow($low)
    {
        
        $this->low = $low;
        return $this;
    }
    
    /**
     * Gets close
     * @return double
     */
    public function getClose()
    {
        return $this->close;
    }
  
    /**
     * Sets close
     * @param double $close 
     * @return $this
     */
    public function setClose($close)
    {
        
        $this->close = $close;
        return $this;
    }
    
    /**
     * Gets trades
     * @return Number
     */
    public function getTrades()
    {
        return $this->trades;
    }
  
    /**
     * Sets trades
     * @param Number $trades 
     * @return $this
     */
    public function setTrades($trades)
    {
        
        $this->trades = $trades;
        return $this;
    }
    
    /**
     * Gets volume
     * @return Number
     */
    public function getVolume()
    {
        return $this->volume;
    }
  
    /**
     * Sets volume
     * @param Number $volume 
     * @return $this
     */
    public function setVolume($volume)
    {
        
        $this->volume = $volume;
        return $this;
    }
    
    /**
     * Gets vwap
     * @return double
     */
    public function getVwap()
    {
        return $this->vwap;
    }
  
    /**
     * Sets vwap
     * @param double $vwap 
     * @return $this
     */
    public function setVwap($vwap)
    {
        
        $this->vwap = $vwap;
        return $this;
    }
    
    /**
     * Gets last_size
     * @return Number
     */
    public function getLastSize()
    {
        return $this->last_size;
    }
  
    /**
     * Sets last_size
     * @param Number $last_size 
     * @return $this
     */
    public function setLastSize($last_size)
    {
        
        $this->last_size = $last_size;
        return $this;
    }
    
    /**
     * Gets turnover
     * @return Number
     */
    public function getTurnover()
    {
        return $this->turnover;
    }
  
    /**
     * Sets turnover
     * @param Number $turnover 
     * @return $this
     */
    public function setTurnover($turnover)
    {
        
        $this->turnover = $turnover;
        return $this;
    }
    
    /**
     * Gets home_notional
     * @return double
     */
    public function getHomeNotional()
    {
        return $this->home_notional;
    }
  
    /**
     * Sets home_notional
     * @param double $home_notional 
     * @return $this
     */
    public function setHomeNotional($home_notional)
    {
        
        $this->home_notional = $home_notional;
        return $this;
    }
    
    /**
     * Gets foreign_notional
     * @return double
     */
    public function getForeignNotional()
    {
        return $this->foreign_notional;
    }
  
    /**
     * Sets foreign_notional
     * @param double $foreign_notional 
     * @return $this
     */
    public function setForeignNotional($foreign_notional)
    {
        
        $this->foreign_notional = $foreign_notional;
        return $this;
    }
    
    /**
     * Gets id
     * @return double
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param double $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
