<?php
/**
 * Quote
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Quote Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Quote implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'timestamp' => '\DateTime',
        'symbol' => 'string',
        'bid_size' => 'Number',
        'bid_price' => 'double',
        'ask_price' => 'double',
        'ask_size' => 'Number',
        'id' => 'double'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'timestamp' => 'timestamp',
        'symbol' => 'symbol',
        'bid_size' => 'bidSize',
        'bid_price' => 'bidPrice',
        'ask_price' => 'askPrice',
        'ask_size' => 'askSize',
        'id' => 'id'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'timestamp' => 'setTimestamp',
        'symbol' => 'setSymbol',
        'bid_size' => 'setBidSize',
        'bid_price' => 'setBidPrice',
        'ask_price' => 'setAskPrice',
        'ask_size' => 'setAskSize',
        'id' => 'setId'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'timestamp' => 'getTimestamp',
        'symbol' => 'getSymbol',
        'bid_size' => 'getBidSize',
        'bid_price' => 'getBidPrice',
        'ask_price' => 'getAskPrice',
        'ask_size' => 'getAskSize',
        'id' => 'getId'
    );
  
    
    /**
      * $timestamp 
      * @var \DateTime
      */
    protected $timestamp;
    
    /**
      * $symbol 
      * @var string
      */
    protected $symbol;
    
    /**
      * $bid_size 
      * @var Number
      */
    protected $bid_size;
    
    /**
      * $bid_price 
      * @var double
      */
    protected $bid_price;
    
    /**
      * $ask_price 
      * @var double
      */
    protected $ask_price;
    
    /**
      * $ask_size 
      * @var Number
      */
    protected $ask_size;
    
    /**
      * $id 
      * @var double
      */
    protected $id;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->timestamp = $data["timestamp"];
            $this->symbol = $data["symbol"];
            $this->bid_size = $data["bid_size"];
            $this->bid_price = $data["bid_price"];
            $this->ask_price = $data["ask_price"];
            $this->ask_size = $data["ask_size"];
            $this->id = $data["id"];
        }
    }
    
    /**
     * Gets timestamp
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }
  
    /**
     * Sets timestamp
     * @param \DateTime $timestamp 
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        
        $this->timestamp = $timestamp;
        return $this;
    }
    
    /**
     * Gets symbol
     * @return string
     */
    public function getSymbol()
    {
        return $this->symbol;
    }
  
    /**
     * Sets symbol
     * @param string $symbol 
     * @return $this
     */
    public function setSymbol($symbol)
    {
        
        $this->symbol = $symbol;
        return $this;
    }
    
    /**
     * Gets bid_size
     * @return Number
     */
    public function getBidSize()
    {
        return $this->bid_size;
    }
  
    /**
     * Sets bid_size
     * @param Number $bid_size 
     * @return $this
     */
    public function setBidSize($bid_size)
    {
        
        $this->bid_size = $bid_size;
        return $this;
    }
    
    /**
     * Gets bid_price
     * @return double
     */
    public function getBidPrice()
    {
        return $this->bid_price;
    }
  
    /**
     * Sets bid_price
     * @param double $bid_price 
     * @return $this
     */
    public function setBidPrice($bid_price)
    {
        
        $this->bid_price = $bid_price;
        return $this;
    }
    
    /**
     * Gets ask_price
     * @return double
     */
    public function getAskPrice()
    {
        return $this->ask_price;
    }
  
    /**
     * Sets ask_price
     * @param double $ask_price 
     * @return $this
     */
    public function setAskPrice($ask_price)
    {
        
        $this->ask_price = $ask_price;
        return $this;
    }
    
    /**
     * Gets ask_size
     * @return Number
     */
    public function getAskSize()
    {
        return $this->ask_size;
    }
  
    /**
     * Sets ask_size
     * @param Number $ask_size 
     * @return $this
     */
    public function setAskSize($ask_size)
    {
        
        $this->ask_size = $ask_size;
        return $this;
    }
    
    /**
     * Gets id
     * @return double
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param double $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
