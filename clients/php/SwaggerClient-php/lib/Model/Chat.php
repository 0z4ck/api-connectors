<?php
/**
 * Chat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Chat Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Chat implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'Number',
        'date' => '\DateTime',
        'user' => 'string',
        'message' => 'string',
        'html' => 'string',
        'from_bot' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'date' => 'date',
        'user' => 'user',
        'message' => 'message',
        'html' => 'html',
        'from_bot' => 'fromBot'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'date' => 'setDate',
        'user' => 'setUser',
        'message' => 'setMessage',
        'html' => 'setHtml',
        'from_bot' => 'setFromBot'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'date' => 'getDate',
        'user' => 'getUser',
        'message' => 'getMessage',
        'html' => 'getHtml',
        'from_bot' => 'getFromBot'
    );
  
    
    /**
      * $id 
      * @var Number
      */
    protected $id;
    
    /**
      * $date 
      * @var \DateTime
      */
    protected $date;
    
    /**
      * $user 
      * @var string
      */
    protected $user;
    
    /**
      * $message 
      * @var string
      */
    protected $message;
    
    /**
      * $html 
      * @var string
      */
    protected $html;
    
    /**
      * $from_bot 
      * @var bool
      */
    protected $from_bot;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->date = $data["date"];
            $this->user = $data["user"];
            $this->message = $data["message"];
            $this->html = $data["html"];
            $this->from_bot = $data["from_bot"];
        }
    }
    
    /**
     * Gets id
     * @return Number
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param Number $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->date;
    }
  
    /**
     * Sets date
     * @param \DateTime $date 
     * @return $this
     */
    public function setDate($date)
    {
        
        $this->date = $date;
        return $this;
    }
    
    /**
     * Gets user
     * @return string
     */
    public function getUser()
    {
        return $this->user;
    }
  
    /**
     * Sets user
     * @param string $user 
     * @return $this
     */
    public function setUser($user)
    {
        
        $this->user = $user;
        return $this;
    }
    
    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->message;
    }
  
    /**
     * Sets message
     * @param string $message 
     * @return $this
     */
    public function setMessage($message)
    {
        
        $this->message = $message;
        return $this;
    }
    
    /**
     * Gets html
     * @return string
     */
    public function getHtml()
    {
        return $this->html;
    }
  
    /**
     * Sets html
     * @param string $html 
     * @return $this
     */
    public function setHtml($html)
    {
        
        $this->html = $html;
        return $this;
    }
    
    /**
     * Gets from_bot
     * @return bool
     */
    public function getFromBot()
    {
        return $this->from_bot;
    }
  
    /**
     * Sets from_bot
     * @param bool $from_bot 
     * @return $this
     */
    public function setFromBot($from_bot)
    {
        
        $this->from_bot = $from_bot;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
