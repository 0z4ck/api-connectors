<?php
/**
 * Affiliate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Affiliate Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Affiliate implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'account' => 'Number',
        'currency' => 'string',
        'prev_payout' => 'Number',
        'prev_turnover' => 'Number',
        'prev_comm' => 'Number',
        'prev_timestamp' => '\DateTime',
        'exec_turnover' => 'Number',
        'exec_comm' => 'Number',
        'total_referrals' => 'Number',
        'total_turnover' => 'Number',
        'total_comm' => 'Number',
        'payout_pcnt' => 'double',
        'pending_payout' => 'Number',
        'timestamp' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'account' => 'account',
        'currency' => 'currency',
        'prev_payout' => 'prevPayout',
        'prev_turnover' => 'prevTurnover',
        'prev_comm' => 'prevComm',
        'prev_timestamp' => 'prevTimestamp',
        'exec_turnover' => 'execTurnover',
        'exec_comm' => 'execComm',
        'total_referrals' => 'totalReferrals',
        'total_turnover' => 'totalTurnover',
        'total_comm' => 'totalComm',
        'payout_pcnt' => 'payoutPcnt',
        'pending_payout' => 'pendingPayout',
        'timestamp' => 'timestamp'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'account' => 'setAccount',
        'currency' => 'setCurrency',
        'prev_payout' => 'setPrevPayout',
        'prev_turnover' => 'setPrevTurnover',
        'prev_comm' => 'setPrevComm',
        'prev_timestamp' => 'setPrevTimestamp',
        'exec_turnover' => 'setExecTurnover',
        'exec_comm' => 'setExecComm',
        'total_referrals' => 'setTotalReferrals',
        'total_turnover' => 'setTotalTurnover',
        'total_comm' => 'setTotalComm',
        'payout_pcnt' => 'setPayoutPcnt',
        'pending_payout' => 'setPendingPayout',
        'timestamp' => 'setTimestamp'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'account' => 'getAccount',
        'currency' => 'getCurrency',
        'prev_payout' => 'getPrevPayout',
        'prev_turnover' => 'getPrevTurnover',
        'prev_comm' => 'getPrevComm',
        'prev_timestamp' => 'getPrevTimestamp',
        'exec_turnover' => 'getExecTurnover',
        'exec_comm' => 'getExecComm',
        'total_referrals' => 'getTotalReferrals',
        'total_turnover' => 'getTotalTurnover',
        'total_comm' => 'getTotalComm',
        'payout_pcnt' => 'getPayoutPcnt',
        'pending_payout' => 'getPendingPayout',
        'timestamp' => 'getTimestamp'
    );
  
    
    /**
      * $account 
      * @var Number
      */
    protected $account;
    
    /**
      * $currency 
      * @var string
      */
    protected $currency;
    
    /**
      * $prev_payout 
      * @var Number
      */
    protected $prev_payout;
    
    /**
      * $prev_turnover 
      * @var Number
      */
    protected $prev_turnover;
    
    /**
      * $prev_comm 
      * @var Number
      */
    protected $prev_comm;
    
    /**
      * $prev_timestamp 
      * @var \DateTime
      */
    protected $prev_timestamp;
    
    /**
      * $exec_turnover 
      * @var Number
      */
    protected $exec_turnover;
    
    /**
      * $exec_comm 
      * @var Number
      */
    protected $exec_comm;
    
    /**
      * $total_referrals 
      * @var Number
      */
    protected $total_referrals;
    
    /**
      * $total_turnover 
      * @var Number
      */
    protected $total_turnover;
    
    /**
      * $total_comm 
      * @var Number
      */
    protected $total_comm;
    
    /**
      * $payout_pcnt 
      * @var double
      */
    protected $payout_pcnt;
    
    /**
      * $pending_payout 
      * @var Number
      */
    protected $pending_payout;
    
    /**
      * $timestamp 
      * @var \DateTime
      */
    protected $timestamp;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->account = $data["account"];
            $this->currency = $data["currency"];
            $this->prev_payout = $data["prev_payout"];
            $this->prev_turnover = $data["prev_turnover"];
            $this->prev_comm = $data["prev_comm"];
            $this->prev_timestamp = $data["prev_timestamp"];
            $this->exec_turnover = $data["exec_turnover"];
            $this->exec_comm = $data["exec_comm"];
            $this->total_referrals = $data["total_referrals"];
            $this->total_turnover = $data["total_turnover"];
            $this->total_comm = $data["total_comm"];
            $this->payout_pcnt = $data["payout_pcnt"];
            $this->pending_payout = $data["pending_payout"];
            $this->timestamp = $data["timestamp"];
        }
    }
    
    /**
     * Gets account
     * @return Number
     */
    public function getAccount()
    {
        return $this->account;
    }
  
    /**
     * Sets account
     * @param Number $account 
     * @return $this
     */
    public function setAccount($account)
    {
        
        $this->account = $account;
        return $this;
    }
    
    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }
  
    /**
     * Sets currency
     * @param string $currency 
     * @return $this
     */
    public function setCurrency($currency)
    {
        
        $this->currency = $currency;
        return $this;
    }
    
    /**
     * Gets prev_payout
     * @return Number
     */
    public function getPrevPayout()
    {
        return $this->prev_payout;
    }
  
    /**
     * Sets prev_payout
     * @param Number $prev_payout 
     * @return $this
     */
    public function setPrevPayout($prev_payout)
    {
        
        $this->prev_payout = $prev_payout;
        return $this;
    }
    
    /**
     * Gets prev_turnover
     * @return Number
     */
    public function getPrevTurnover()
    {
        return $this->prev_turnover;
    }
  
    /**
     * Sets prev_turnover
     * @param Number $prev_turnover 
     * @return $this
     */
    public function setPrevTurnover($prev_turnover)
    {
        
        $this->prev_turnover = $prev_turnover;
        return $this;
    }
    
    /**
     * Gets prev_comm
     * @return Number
     */
    public function getPrevComm()
    {
        return $this->prev_comm;
    }
  
    /**
     * Sets prev_comm
     * @param Number $prev_comm 
     * @return $this
     */
    public function setPrevComm($prev_comm)
    {
        
        $this->prev_comm = $prev_comm;
        return $this;
    }
    
    /**
     * Gets prev_timestamp
     * @return \DateTime
     */
    public function getPrevTimestamp()
    {
        return $this->prev_timestamp;
    }
  
    /**
     * Sets prev_timestamp
     * @param \DateTime $prev_timestamp 
     * @return $this
     */
    public function setPrevTimestamp($prev_timestamp)
    {
        
        $this->prev_timestamp = $prev_timestamp;
        return $this;
    }
    
    /**
     * Gets exec_turnover
     * @return Number
     */
    public function getExecTurnover()
    {
        return $this->exec_turnover;
    }
  
    /**
     * Sets exec_turnover
     * @param Number $exec_turnover 
     * @return $this
     */
    public function setExecTurnover($exec_turnover)
    {
        
        $this->exec_turnover = $exec_turnover;
        return $this;
    }
    
    /**
     * Gets exec_comm
     * @return Number
     */
    public function getExecComm()
    {
        return $this->exec_comm;
    }
  
    /**
     * Sets exec_comm
     * @param Number $exec_comm 
     * @return $this
     */
    public function setExecComm($exec_comm)
    {
        
        $this->exec_comm = $exec_comm;
        return $this;
    }
    
    /**
     * Gets total_referrals
     * @return Number
     */
    public function getTotalReferrals()
    {
        return $this->total_referrals;
    }
  
    /**
     * Sets total_referrals
     * @param Number $total_referrals 
     * @return $this
     */
    public function setTotalReferrals($total_referrals)
    {
        
        $this->total_referrals = $total_referrals;
        return $this;
    }
    
    /**
     * Gets total_turnover
     * @return Number
     */
    public function getTotalTurnover()
    {
        return $this->total_turnover;
    }
  
    /**
     * Sets total_turnover
     * @param Number $total_turnover 
     * @return $this
     */
    public function setTotalTurnover($total_turnover)
    {
        
        $this->total_turnover = $total_turnover;
        return $this;
    }
    
    /**
     * Gets total_comm
     * @return Number
     */
    public function getTotalComm()
    {
        return $this->total_comm;
    }
  
    /**
     * Sets total_comm
     * @param Number $total_comm 
     * @return $this
     */
    public function setTotalComm($total_comm)
    {
        
        $this->total_comm = $total_comm;
        return $this;
    }
    
    /**
     * Gets payout_pcnt
     * @return double
     */
    public function getPayoutPcnt()
    {
        return $this->payout_pcnt;
    }
  
    /**
     * Sets payout_pcnt
     * @param double $payout_pcnt 
     * @return $this
     */
    public function setPayoutPcnt($payout_pcnt)
    {
        
        $this->payout_pcnt = $payout_pcnt;
        return $this;
    }
    
    /**
     * Gets pending_payout
     * @return Number
     */
    public function getPendingPayout()
    {
        return $this->pending_payout;
    }
  
    /**
     * Sets pending_payout
     * @param Number $pending_payout 
     * @return $this
     */
    public function setPendingPayout($pending_payout)
    {
        
        $this->pending_payout = $pending_payout;
        return $this;
    }
    
    /**
     * Gets timestamp
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }
  
    /**
     * Sets timestamp
     * @param \DateTime $timestamp 
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        
        $this->timestamp = $timestamp;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
