<?php
/**
 * Stats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Stats Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Stats implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'root_symbol' => 'string',
        'currency' => 'string',
        'volume24h' => 'Number',
        'turnover24h' => 'Number',
        'open_interest' => 'Number',
        'open_value' => 'Number'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'root_symbol' => 'rootSymbol',
        'currency' => 'currency',
        'volume24h' => 'volume24h',
        'turnover24h' => 'turnover24h',
        'open_interest' => 'openInterest',
        'open_value' => 'openValue'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'root_symbol' => 'setRootSymbol',
        'currency' => 'setCurrency',
        'volume24h' => 'setVolume24h',
        'turnover24h' => 'setTurnover24h',
        'open_interest' => 'setOpenInterest',
        'open_value' => 'setOpenValue'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'root_symbol' => 'getRootSymbol',
        'currency' => 'getCurrency',
        'volume24h' => 'getVolume24h',
        'turnover24h' => 'getTurnover24h',
        'open_interest' => 'getOpenInterest',
        'open_value' => 'getOpenValue'
    );
  
    
    /**
      * $root_symbol 
      * @var string
      */
    protected $root_symbol;
    
    /**
      * $currency 
      * @var string
      */
    protected $currency;
    
    /**
      * $volume24h 
      * @var Number
      */
    protected $volume24h;
    
    /**
      * $turnover24h 
      * @var Number
      */
    protected $turnover24h;
    
    /**
      * $open_interest 
      * @var Number
      */
    protected $open_interest;
    
    /**
      * $open_value 
      * @var Number
      */
    protected $open_value;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->root_symbol = $data["root_symbol"];
            $this->currency = $data["currency"];
            $this->volume24h = $data["volume24h"];
            $this->turnover24h = $data["turnover24h"];
            $this->open_interest = $data["open_interest"];
            $this->open_value = $data["open_value"];
        }
    }
    
    /**
     * Gets root_symbol
     * @return string
     */
    public function getRootSymbol()
    {
        return $this->root_symbol;
    }
  
    /**
     * Sets root_symbol
     * @param string $root_symbol 
     * @return $this
     */
    public function setRootSymbol($root_symbol)
    {
        
        $this->root_symbol = $root_symbol;
        return $this;
    }
    
    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }
  
    /**
     * Sets currency
     * @param string $currency 
     * @return $this
     */
    public function setCurrency($currency)
    {
        
        $this->currency = $currency;
        return $this;
    }
    
    /**
     * Gets volume24h
     * @return Number
     */
    public function getVolume24h()
    {
        return $this->volume24h;
    }
  
    /**
     * Sets volume24h
     * @param Number $volume24h 
     * @return $this
     */
    public function setVolume24h($volume24h)
    {
        
        $this->volume24h = $volume24h;
        return $this;
    }
    
    /**
     * Gets turnover24h
     * @return Number
     */
    public function getTurnover24h()
    {
        return $this->turnover24h;
    }
  
    /**
     * Sets turnover24h
     * @param Number $turnover24h 
     * @return $this
     */
    public function setTurnover24h($turnover24h)
    {
        
        $this->turnover24h = $turnover24h;
        return $this;
    }
    
    /**
     * Gets open_interest
     * @return Number
     */
    public function getOpenInterest()
    {
        return $this->open_interest;
    }
  
    /**
     * Sets open_interest
     * @param Number $open_interest 
     * @return $this
     */
    public function setOpenInterest($open_interest)
    {
        
        $this->open_interest = $open_interest;
        return $this;
    }
    
    /**
     * Gets open_value
     * @return Number
     */
    public function getOpenValue()
    {
        return $this->open_value;
    }
  
    /**
     * Sets open_value
     * @param Number $open_value 
     * @return $this
     */
    public function setOpenValue($open_value)
    {
        
        $this->open_value = $open_value;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
