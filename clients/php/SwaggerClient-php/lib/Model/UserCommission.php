<?php
/**
 * UserCommission
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * UserCommission Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserCommission implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'maker_fee' => 'string',
        'taker_fee' => 'string',
        'insurance_fee' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'maker_fee' => 'makerFee',
        'taker_fee' => 'takerFee',
        'insurance_fee' => 'insuranceFee'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'maker_fee' => 'setMakerFee',
        'taker_fee' => 'setTakerFee',
        'insurance_fee' => 'setInsuranceFee'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'maker_fee' => 'getMakerFee',
        'taker_fee' => 'getTakerFee',
        'insurance_fee' => 'getInsuranceFee'
    );
  
    
    /**
      * $maker_fee 
      * @var string
      */
    protected $maker_fee;
    
    /**
      * $taker_fee 
      * @var string
      */
    protected $taker_fee;
    
    /**
      * $insurance_fee 
      * @var string
      */
    protected $insurance_fee;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->maker_fee = $data["maker_fee"];
            $this->taker_fee = $data["taker_fee"];
            $this->insurance_fee = $data["insurance_fee"];
        }
    }
    
    /**
     * Gets maker_fee
     * @return string
     */
    public function getMakerFee()
    {
        return $this->maker_fee;
    }
  
    /**
     * Sets maker_fee
     * @param string $maker_fee 
     * @return $this
     */
    public function setMakerFee($maker_fee)
    {
        
        $this->maker_fee = $maker_fee;
        return $this;
    }
    
    /**
     * Gets taker_fee
     * @return string
     */
    public function getTakerFee()
    {
        return $this->taker_fee;
    }
  
    /**
     * Sets taker_fee
     * @param string $taker_fee 
     * @return $this
     */
    public function setTakerFee($taker_fee)
    {
        
        $this->taker_fee = $taker_fee;
        return $this;
    }
    
    /**
     * Gets insurance_fee
     * @return string
     */
    public function getInsuranceFee()
    {
        return $this->insurance_fee;
    }
  
    /**
     * Sets insurance_fee
     * @param string $insurance_fee 
     * @return $this
     */
    public function setInsuranceFee($insurance_fee)
    {
        
        $this->insurance_fee = $insurance_fee;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
