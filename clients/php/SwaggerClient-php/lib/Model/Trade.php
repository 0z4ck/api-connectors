<?php
/**
 * Trade
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Trade Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Trade implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'timestamp' => '\DateTime',
        'symbol' => 'string',
        'side' => 'string',
        'size' => 'Number',
        'price' => 'double',
        'tick_direction' => 'string',
        'trd_match_id' => 'string',
        'gross_value' => 'Number',
        'home_notional' => 'double',
        'foreign_notional' => 'double',
        'id' => 'double'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'timestamp' => 'timestamp',
        'symbol' => 'symbol',
        'side' => 'side',
        'size' => 'size',
        'price' => 'price',
        'tick_direction' => 'tickDirection',
        'trd_match_id' => 'trdMatchID',
        'gross_value' => 'grossValue',
        'home_notional' => 'homeNotional',
        'foreign_notional' => 'foreignNotional',
        'id' => 'id'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'timestamp' => 'setTimestamp',
        'symbol' => 'setSymbol',
        'side' => 'setSide',
        'size' => 'setSize',
        'price' => 'setPrice',
        'tick_direction' => 'setTickDirection',
        'trd_match_id' => 'setTrdMatchId',
        'gross_value' => 'setGrossValue',
        'home_notional' => 'setHomeNotional',
        'foreign_notional' => 'setForeignNotional',
        'id' => 'setId'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'timestamp' => 'getTimestamp',
        'symbol' => 'getSymbol',
        'side' => 'getSide',
        'size' => 'getSize',
        'price' => 'getPrice',
        'tick_direction' => 'getTickDirection',
        'trd_match_id' => 'getTrdMatchId',
        'gross_value' => 'getGrossValue',
        'home_notional' => 'getHomeNotional',
        'foreign_notional' => 'getForeignNotional',
        'id' => 'getId'
    );
  
    
    /**
      * $timestamp 
      * @var \DateTime
      */
    protected $timestamp;
    
    /**
      * $symbol 
      * @var string
      */
    protected $symbol;
    
    /**
      * $side 
      * @var string
      */
    protected $side;
    
    /**
      * $size 
      * @var Number
      */
    protected $size;
    
    /**
      * $price 
      * @var double
      */
    protected $price;
    
    /**
      * $tick_direction 
      * @var string
      */
    protected $tick_direction;
    
    /**
      * $trd_match_id 
      * @var string
      */
    protected $trd_match_id;
    
    /**
      * $gross_value 
      * @var Number
      */
    protected $gross_value;
    
    /**
      * $home_notional 
      * @var double
      */
    protected $home_notional;
    
    /**
      * $foreign_notional 
      * @var double
      */
    protected $foreign_notional;
    
    /**
      * $id 
      * @var double
      */
    protected $id;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->timestamp = $data["timestamp"];
            $this->symbol = $data["symbol"];
            $this->side = $data["side"];
            $this->size = $data["size"];
            $this->price = $data["price"];
            $this->tick_direction = $data["tick_direction"];
            $this->trd_match_id = $data["trd_match_id"];
            $this->gross_value = $data["gross_value"];
            $this->home_notional = $data["home_notional"];
            $this->foreign_notional = $data["foreign_notional"];
            $this->id = $data["id"];
        }
    }
    
    /**
     * Gets timestamp
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }
  
    /**
     * Sets timestamp
     * @param \DateTime $timestamp 
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        
        $this->timestamp = $timestamp;
        return $this;
    }
    
    /**
     * Gets symbol
     * @return string
     */
    public function getSymbol()
    {
        return $this->symbol;
    }
  
    /**
     * Sets symbol
     * @param string $symbol 
     * @return $this
     */
    public function setSymbol($symbol)
    {
        
        $this->symbol = $symbol;
        return $this;
    }
    
    /**
     * Gets side
     * @return string
     */
    public function getSide()
    {
        return $this->side;
    }
  
    /**
     * Sets side
     * @param string $side 
     * @return $this
     */
    public function setSide($side)
    {
        
        $this->side = $side;
        return $this;
    }
    
    /**
     * Gets size
     * @return Number
     */
    public function getSize()
    {
        return $this->size;
    }
  
    /**
     * Sets size
     * @param Number $size 
     * @return $this
     */
    public function setSize($size)
    {
        
        $this->size = $size;
        return $this;
    }
    
    /**
     * Gets price
     * @return double
     */
    public function getPrice()
    {
        return $this->price;
    }
  
    /**
     * Sets price
     * @param double $price 
     * @return $this
     */
    public function setPrice($price)
    {
        
        $this->price = $price;
        return $this;
    }
    
    /**
     * Gets tick_direction
     * @return string
     */
    public function getTickDirection()
    {
        return $this->tick_direction;
    }
  
    /**
     * Sets tick_direction
     * @param string $tick_direction 
     * @return $this
     */
    public function setTickDirection($tick_direction)
    {
        
        $this->tick_direction = $tick_direction;
        return $this;
    }
    
    /**
     * Gets trd_match_id
     * @return string
     */
    public function getTrdMatchId()
    {
        return $this->trd_match_id;
    }
  
    /**
     * Sets trd_match_id
     * @param string $trd_match_id 
     * @return $this
     */
    public function setTrdMatchId($trd_match_id)
    {
        
        $this->trd_match_id = $trd_match_id;
        return $this;
    }
    
    /**
     * Gets gross_value
     * @return Number
     */
    public function getGrossValue()
    {
        return $this->gross_value;
    }
  
    /**
     * Sets gross_value
     * @param Number $gross_value 
     * @return $this
     */
    public function setGrossValue($gross_value)
    {
        
        $this->gross_value = $gross_value;
        return $this;
    }
    
    /**
     * Gets home_notional
     * @return double
     */
    public function getHomeNotional()
    {
        return $this->home_notional;
    }
  
    /**
     * Sets home_notional
     * @param double $home_notional 
     * @return $this
     */
    public function setHomeNotional($home_notional)
    {
        
        $this->home_notional = $home_notional;
        return $this;
    }
    
    /**
     * Gets foreign_notional
     * @return double
     */
    public function getForeignNotional()
    {
        return $this->foreign_notional;
    }
  
    /**
     * Sets foreign_notional
     * @param double $foreign_notional 
     * @return $this
     */
    public function setForeignNotional($foreign_notional)
    {
        
        $this->foreign_notional = $foreign_notional;
        return $this;
    }
    
    /**
     * Gets id
     * @return double
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param double $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
