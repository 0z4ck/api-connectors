<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class UserApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  /**
	 * getDepositAddress
	 * Get a deposit address.
   * currency, string:  (optional)

   * @return string
	 */

   public function getDepositAddress($currency=null) {

  		//parse inputs
  		$resourcePath = "/user/depositAddress";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($currency != null) {
  		  $queryParams['currency'] = $this->apiClient->toQueryValue($currency);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'string');
  		return $responseObject;

      }
  /**
	 * getWalletHistory
	 * Get a history of all of your wallet transactions (deposits and withdrawals).
   * @return Array[Transaction]
	 */

   public function getWalletHistory() {

  		//parse inputs
  		$resourcePath = "/user/walletHistory";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[Transaction]');
  		return $responseObject;

      }
  /**
	 * requestWithdrawal
	 * Request a withdrawal to an external wallet.
   * amount, float: Amount of withdrawal currency. Note that for Bitcoin withdrawals, a standard 0.0001 XBT fee is charged by the Bitcoin network. (required)

   * address, string: Destination Address. (required)

   * currency, string: Currency you're withdrawing. (optional)

   * @return Transaction
	 */

   public function requestWithdrawal($amount, $address, $currency=null) {

  		//parse inputs
  		$resourcePath = "/user/requestWithdrawal";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Transaction');
  		return $responseObject;

      }
  /**
	 * cancelWithdrawal
	 * Cancel a withdrawal.
   * token, string:  (required)

   * @return Transaction
	 */

   public function cancelWithdrawal($token) {

  		//parse inputs
  		$resourcePath = "/user/cancelWithdrawal";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Transaction');
  		return $responseObject;

      }
  /**
	 * confirmWithdrawal
	 * Confirm a withdrawal.
   * token, string:  (required)

   * @return Transaction
	 */

   public function confirmWithdrawal($token) {

  		//parse inputs
  		$resourcePath = "/user/confirmWithdrawal";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Transaction');
  		return $responseObject;

      }
  /**
	 * requestEnableTFA
	 * Get Google Authenticator secret key for setting up two-factor auth. Fails if already enabled.
   * type, string: Two-factor auth type. Supported types: 'GA' (Google Authenticator) (optional)

   * @return bool
	 */

   public function requestEnableTFA($type=null) {

  		//parse inputs
  		$resourcePath = "/user/requestEnableTFA";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'bool');
  		return $responseObject;

      }
  /**
	 * confirmEnableTFA
	 * Confirm two-factor auth for this account.
   * token, string: Token from your selected TFA type. (required)

   * type, string: Two-factor auth type. Supported types: 'GA' (Google Authenticator) (optional)

   * @return bool
	 */

   public function confirmEnableTFA($token, $type=null) {

  		//parse inputs
  		$resourcePath = "/user/confirmEnableTFA";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'bool');
  		return $responseObject;

      }
  /**
	 * sendVerificationEmail
	 * Re-send verification email.
   * email, string:  (required)

   * @return bool
	 */

   public function sendVerificationEmail($email) {

  		//parse inputs
  		$resourcePath = "/user/resendVerificationEmail";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      if($email != null) {
  		  $queryParams['email'] = $this->apiClient->toQueryValue($email);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'bool');
  		return $responseObject;

      }
  /**
	 * confirmEmail
	 * Confirm your email address with a token.
   * token, string:  (required)

   * @return bool
	 */

   public function confirmEmail($token) {

  		//parse inputs
  		$resourcePath = "/user/confirmEmail";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'bool');
  		return $responseObject;

      }
  /**
	 * requestPasswordReset
	 * Request a password reset.
   * email, string:  (required)

   * @return bool
	 */

   public function requestPasswordReset($email) {

  		//parse inputs
  		$resourcePath = "/user/requestPasswordReset";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'bool');
  		return $responseObject;

      }
  /**
	 * confirmPasswordReset
	 * Confirm a password reset.
   * email, string:  (required)

   * token, string:  (required)

   * newPassword, string:  (required)

   * @return bool
	 */

   public function confirmPasswordReset($email, $token, $newPassword) {

  		//parse inputs
  		$resourcePath = "/user/confirmPasswordReset";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'bool');
  		return $responseObject;

      }
  /**
	 * newUser
	 * Register a new user.
   * email, string: Your email address. (required)

   * password, string: Your password. (required)

   * username, string: Desired username. (required)

   * firstname, string: First name. (optional)

   * lastname, string: Last name. (optional)

   * acceptsTOS, string: Set to true to indicate acceptance of the Terms of Service (https://www.bitmex.com/app/terms). (optional)

   * accountType, string: Account type. Options: ['Trader', 'Hedger']. See the &lt;a href=&quot;/app/fees&quot;&gt;fees page&lt;/a&gt; for more details. (optional)

   * @return User
	 */

   public function newUser($email, $password, $username, $firstname=null, $lastname=null, $acceptsTOS=null, $accountType=null) {

  		//parse inputs
  		$resourcePath = "/user";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'User');
  		return $responseObject;

      }
  /**
	 * getMe
	 * Get your user model.
   * @return User
	 */

   public function getMe() {

  		//parse inputs
  		$resourcePath = "/user";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'User');
  		return $responseObject;

      }
  /**
	 * updateMe
	 * Update your password, name, and other attributes.
   * firstname, string:  (optional)

   * lastname, string:  (optional)

   * oldPassword, string:  (optional)

   * newPassword, string:  (optional)

   * newPasswordConfirm, string:  (optional)

   * accountType, string: Account fee schedule. Options: ['Trader', 'Hedger']. See the &lt;a href=&quot;/app/fees&quot;&gt;fees page&lt;/a&gt; for more details. (optional)

   * @return User
	 */

   public function updateMe($firstname=null, $lastname=null, $oldPassword=null, $newPassword=null, $newPasswordConfirm=null, $accountType=null) {

  		//parse inputs
  		$resourcePath = "/user";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'User');
  		return $responseObject;

      }
  /**
	 * login
	 * Log in to BitMEX.
   * email, string: Your email address. (required)

   * password, string: Your password. (required)

   * token, string: OTP Token (YubiKey, Google Authenticator) (optional)

   * @return AccessToken
	 */

   public function login($email, $password, $token=null) {

  		//parse inputs
  		$resourcePath = "/user/login";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'AccessToken');
  		return $responseObject;

      }
  /**
	 * logout
	 * Log out of BitMEX.
   * @return 
	 */

   public function logout() {

  		//parse inputs
  		$resourcePath = "/user/logout";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      }
  /**
	 * savePreferences
	 * Save application preferences.
   * prefs, object:  (required)

   * @return User
	 */

   public function savePreferences($prefs) {

  		//parse inputs
  		$resourcePath = "/user/preferences";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'User');
  		return $responseObject;

      }
  /**
	 * getCommission
	 * Get your account's commission status.
   * @return Array[any]
	 */

   public function getCommission() {

  		//parse inputs
  		$resourcePath = "/user/commission";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = 'application/json';

      //make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Array[any]');
  		return $responseObject;

      }
  

}

